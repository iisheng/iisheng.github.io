<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>时间管理：如何充分利用你的24小时</title>
    <url>/2019/10/09/time-mgt/</url>
    <content><![CDATA[<p><strong>如果你对 “如何充分利用你的24小时”感兴趣，我推荐你读《时间管理 如何充分利用你的24小时》漫画版。</strong></p>
<p>以下是我个人从书中学到的以及一些自己的体会。</p>
<h3 id="意识到自己的时间花费在什么地方"><a href="#意识到自己的时间花费在什么地方" class="headerlink" title="意识到自己的时间花费在什么地方"></a>意识到自己的时间花费在什么地方</h3><p>每天睡觉之前的时间，可以总结一下当天都做什么事情，分别花费了多少时间。画一个如下类似的表格：</p>
<table>
<thead>
<tr>
<th style="text-align:center">时间段</th>
<th style="text-align:center">内容</th>
<th style="text-align:center">时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">02:30-12:00</td>
<td style="text-align:center">睡觉</td>
<td style="text-align:center">9.5小时</td>
</tr>
<tr>
<td style="text-align:center">14:00-20:00</td>
<td style="text-align:center">打王者荣耀</td>
<td style="text-align:center">6小时</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">19:00-22:00</td>
<td style="text-align:center">看电视剧</td>
<td style="text-align:center">5小时</td>
</tr>
<tr>
<td style="text-align:center">23:00-24:00</td>
<td style="text-align:center">定外卖吃饭</td>
<td style="text-align:center">3小时</td>
</tr>
</tbody>
</table>
<p>这样可以清晰看到自己在某件事情上花费的时间，可以根据自己的情况在计划表中减少或者增加。</p>
<a id="more"></a>
<h3 id="确定自己的目标"><a href="#确定自己的目标" class="headerlink" title="确定自己的目标"></a>确定自己的目标</h3><p>找自己喜欢的方式给自己制定明确的计划表，比如：</p>
<table>
<thead>
<tr>
<th style="text-align:center">时间</th>
<th style="text-align:center">内容 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">01:00-08:00</td>
<td style="text-align:center">睡觉</td>
</tr>
<tr>
<td style="text-align:center">08:30-09:00</td>
<td style="text-align:center">吃早餐</td>
</tr>
<tr>
<td style="text-align:center">09:00-12:00</td>
<td style="text-align:center">学习数据结构</td>
</tr>
<tr>
<td style="text-align:center">…</td>
<td style="text-align:center">…</td>
</tr>
<tr>
<td style="text-align:center">23:00-24:00</td>
<td style="text-align:center">洗澡、做当天总结、做第二天计划</td>
</tr>
</tbody>
</table>
<p>对比自己的计划表和实际花费的时间表，总结自己的行为，改进自己的时间管理。</p>
<h3 id="选择对自己目标有帮助的事情去做，放弃那些影响自己达成目标的事情"><a href="#选择对自己目标有帮助的事情去做，放弃那些影响自己达成目标的事情" class="headerlink" title="选择对自己目标有帮助的事情去做，放弃那些影响自己达成目标的事情"></a>选择对自己目标有帮助的事情去做，放弃那些影响自己达成目标的事情</h3><h4 id="习惯养成"><a href="#习惯养成" class="headerlink" title="习惯养成"></a>习惯养成</h4><ul>
<li>闹钟响起，立即下床</li>
<li>上午时间，学习数据结构与算法相关</li>
<li>规律、健康的饮食和运动</li>
<li>快速做抉择</li>
<li>快速阅读</li>
<li>利用碎片时间，地铁上、等外卖、排队的时候，可以看公众号、极客时间<br>、知识星球</li>
<li>不拖延，按照计划表去做。大任务，分解成小任务，放到计划表中。</li>
<li>拒绝杂乱无章，物应各有其所，亦应各在其所</li>
<li>每周对自己的时间花费行为进行总结，每月也要总结，已经制定下月计划</li>
</ul>
<h4 id="时间管理技巧"><a href="#时间管理技巧" class="headerlink" title="时间管理技巧"></a>时间管理技巧</h4><ul>
<li>利用好碎片时间</li>
<li>做事前花特定时间思考，思考时间过后开始行动</li>
<li>做事专注</li>
<li>做事不半途而废，做完之后，不再打开</li>
<li>注意在重要的事情上多花费时间</li>
<li>注意优先顺序，在精力充沛的时间，做当天最困难的事情</li>
<li>保似水之心</li>
<li>拒绝杂乱无章</li>
<li>总结、制定计划</li>
<li>规律、健康的饮食和运动</li>
</ul>
]]></content>
      <categories>
        <category>心得</category>
      </categories>
      <tags>
        <tag>时间管理</tag>
      </tags>
  </entry>
  <entry>
    <title>五大算法之分治</title>
    <url>/2019/09/03/divide-conquer/</url>
    <content><![CDATA[<h4 id="分治法思想"><a href="#分治法思想" class="headerlink" title="分治法思想"></a>分治法思想</h4><p>将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后再合并这些子问题的解来建立原问题的解。</p>
<h4 id="分治模式在每层递归时都有三个步骤："><a href="#分治模式在每层递归时都有三个步骤：" class="headerlink" title="分治模式在每层递归时都有三个步骤："></a>分治模式在每层递归时都有三个步骤：</h4><ul>
<li><strong>分解</strong>原问题为若干个子问题，这些子问题是原问题规模较小的实例。</li>
<li><strong>解决</strong>这些子问题，递归地求解各子问题。然而，若子问题规模足够小，则直接求解。</li>
<li><strong>合并</strong>这些子问题的解成原问题的解。</li>
</ul>
<h4 id="归并排序中的分治模式"><a href="#归并排序中的分治模式" class="headerlink" title="归并排序中的分治模式"></a>归并排序中的分治模式</h4><ol>
<li><strong>分解</strong>：分解待排序的n个元素的序列成各具n/2各元素的两个子序列。</li>
<li><strong>解决</strong>：使用归并排序递归地排序两个子序列。</li>
<li><strong>合并</strong>：合并两个已排序的子序列以产生已排序的答案。</li>
</ol>
<a id="more"></a>
<p>我们用代码实现一下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手写一个归并排序-</span></span><br><span class="line"><span class="comment"> * 归并排序遵循 归并模式</span></span><br><span class="line"><span class="comment"> * 分解：将n个元素的数组分解为2个 n/2个元素的数组</span></span><br><span class="line"><span class="comment"> * 解决：分别对2个子数组排序</span></span><br><span class="line"><span class="comment"> * 合并：合并2个已经排序的子数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        mergeSort(array, left, mid);</span><br><span class="line">        mergeSort(array, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(array, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将两个数组 合并 [min, mid] [mid+1, max]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> i = left;</span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt;= array[j]) &#123;</span><br><span class="line">            temp[k++] = array[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[k++] = array[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        temp[k++] = array[i++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        temp[k++] = array[j++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; temp.length; p++) &#123;</span><br><span class="line">        array[left + p] = temp[p];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    System.out.println(<span class="string">"排序前数组"</span> + Arrays.toString(array));</span><br><span class="line">    mergeSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">"排序后数组"</span> + Arrays.toString(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="递归式"><a href="#递归式" class="headerlink" title="递归式"></a>递归式</h4><p>当一个算法包含对其自身的递归调用时，我们往往可以用<strong>递归方程</strong>或<strong>递归式</strong>来描述其运行时间，该方程根据在较小上的运行时间来描述在规模为n的问题上的总运行时间。</p>
<h4 id="时间复杂度推算"><a href="#时间复杂度推算" class="headerlink" title="时间复杂度推算"></a>时间复杂度推算</h4><h4 id="最大子数组问题"><a href="#最大子数组问题" class="headerlink" title="最大子数组问题"></a>最大子数组问题</h4><p>给一个数组，找出一个具有最大和的连续子数组，返回最大和。</p>
<p> <a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">leetcode 53. Maximum Subarray</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 思路</span></span><br><span class="line"><span class="comment"> * 分解：将数组分为2个 子数组</span></span><br><span class="line"><span class="comment"> * 解决：两个子数组的 最大和 可以直接求得， 包含中间点 的 最大和 经过特殊计算一下</span></span><br><span class="line"><span class="comment"> * 合并：返回两个子数组 最大和 中 最大的一个 或者 返回 包含中间点 的最大和</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> calcMaxSubarray(nums, <span class="number">0</span>, (nums.length - <span class="number">1</span>) / <span class="number">2</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算最大子数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calcMaxSubarray</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// left &gt;= right 跳出递归</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) &#123;</span><br><span class="line">        <span class="keyword">return</span> array[left];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左面子数组 最大值</span></span><br><span class="line">    <span class="keyword">int</span> leftMax = calcMaxSubarray(array, left, (left + mid) / <span class="number">2</span>, mid);</span><br><span class="line">    <span class="comment">// 右面子数组 最大值</span></span><br><span class="line">    <span class="keyword">int</span> rightMax = calcMaxSubarray(array, mid + <span class="number">1</span>, (mid + <span class="number">1</span> + right) / <span class="number">2</span>, right);</span><br><span class="line">    <span class="comment">// 包含中间点的 两个子数组 的最大值 初始值 设为 中点的值</span></span><br><span class="line">    <span class="keyword">int</span> midMax = array[mid], temp = midMax;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid - <span class="number">1</span>; i &gt;= left; i--) &#123;</span><br><span class="line">        temp += array[i];</span><br><span class="line">        midMax = Math.max(temp, midMax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    temp = midMax;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">        temp += array[i];</span><br><span class="line">        midMax = Math.max(temp, midMax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Math.max(midMax, Math.max(leftMax, rightMax));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    System.out.println(maxSubArray(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>分治算法</tag>
      </tags>
  </entry>
  <entry>
    <title>常用排序算法总结</title>
    <url>/2019/05/13/sort/</url>
    <content><![CDATA[<h3 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h3><p>临近的数字两两进行比较，按照从小到大或者从大到小的顺序交换，这样一趟后，最大或者最小的数字被交换到最后一位。<br>然后再从头开始两两进行比较交换，直到排序完成。</p>
<p>　　交换数组中两个元素的方法：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> swap=arr[i];</span><br><span class="line">	arr[i]=arr[j];</span><br><span class="line">	arr[j]=swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>冒泡排序算法代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j])</span><br><span class="line">		swap(arr, j + <span class="number">1</span>, j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h3><p>直接从待选择排序数组里面选择一个最小（或者最大）的数字，与第一个位置的数交换。<br>然后再在剩下的数中选择最小（或者最大）的数字，与第二个位置的数字交换，如此循环到只剩下一个数字为止。</p>
<p>选择排序代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = arr.length;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> min = arr[i];</span><br><span class="line">		<span class="keyword">int</span> min_index = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &lt; min) &#123;</span><br><span class="line">				min = arr[j];</span><br><span class="line">				min_index = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		swap(arr, min_index, i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h3><p>　　每一步将一个待排序数据按其大小插入到已经排序的数组中的适当位置，直到全部插入完毕。<br>　　插入排序代码实现：<br>　　<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = arr.length;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> temp = arr[i];</span><br><span class="line">		<span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; arr[j - <span class="number">1</span>]; j--) &#123;</span><br><span class="line">			arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		arr[j] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="四、快速排序"><a href="#四、快速排序" class="headerlink" title="四、快速排序"></a>四、快速排序</h3><p>选择一个基本元素，通常选择第一个元素或者最后一个元素，通过一趟扫描，将待排序列分成两部分，一部分比基准元素小，另一部分大于或等于基准元素。<br>这一趟扫描结束后，该基准就处于序列的中间位置。然后再用同样的方法递归的排序划分这两部分。</p>
<p>快速排序代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">	recursion(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">		<span class="keyword">int</span> pivot = partition(arr, low, high);</span><br><span class="line">		recursion(arr, low, pivot - <span class="number">1</span>);</span><br><span class="line">		recursion(arr, pivot + <span class="number">1</span>, high);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回 基数 在数组 中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pivot = arr[low];</span><br><span class="line">	<span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot)</span><br><span class="line">			--high;</span><br><span class="line">		arr[low] = arr[high];</span><br><span class="line">		<span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt; pivot)</span><br><span class="line">			++low;</span><br><span class="line">		arr[high] = arr[low];</span><br><span class="line">	&#125;</span><br><span class="line">	arr[low] = pivot;</span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>UML九种图关系总结</title>
    <url>/2019/05/06/uml/</url>
    <content><![CDATA[<h3 id="什么是UML"><a href="#什么是UML" class="headerlink" title="什么是UML"></a>什么是UML</h3><p>UML是Unified Model Language的缩写，是一种建模语言。通过使用UML使得在软件开发之前，<br>对整个软件设计有更好的可读性，可理解性，从而降低开发风险。同时，也能方便各个开发人员之间的交流。</p>
<h3 id="UML九种图"><a href="#UML九种图" class="headerlink" title="UML九种图"></a>UML九种图</h3><p>如下图所示，UML图分为，用例图、静态图、交互图、行为图、实现图。静态图包括类图和对象图，<br>交互图包括序列图和协作图，行为图包括状态图和活动图，实现图包括构件图和部署图。</p>
<h4 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h4><pre><code>【概念】描述用户的需求，从用户的角度描述系统的功能
【描述方式】椭圆表示某个用例，人形符号表示角色
【目的】帮助开发团队以一种可视化的方式理解系统的功能需求
</code></pre><a id="more"></a>
<p><img src="https://image.dullnull.org/use-case-diagram.png" alt="image"></p>
<h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><pre><code>【概念】根据用例图抽象成类，描述类的内部结构和类与类之间的关系
【描述方式】矩形表示类或者接口，之间的关系使用箭头、三角形和虚线或者实线表示
【目的】显示系统的静态结构，表示不同的实体是如何关联的
 在UML关系中，常见的有一下几种关系。泛化（Generalization）,实现（Realization）,关联（Association）,聚合（Aggregation）,组合（Composition）,依赖（Dependency）
</code></pre><h5 id="【泛化关系】-是一种继承关系，表示子类继承父类的所有特征和行为。"><a href="#【泛化关系】-是一种继承关系，表示子类继承父类的所有特征和行为。" class="headerlink" title="【泛化关系】:是一种继承关系，表示子类继承父类的所有特征和行为。"></a>【泛化关系】:是一种继承关系，表示子类继承父类的所有特征和行为。</h5><h5 id="【箭头指向】-带三角箭头的实现线，箭头指向父类。"><a href="#【箭头指向】-带三角箭头的实现线，箭头指向父类。" class="headerlink" title="【箭头指向】:带三角箭头的实现线，箭头指向父类。"></a>【箭头指向】:带三角箭头的实现线，箭头指向父类。</h5><p><img src="https://image.dullnull.org/generalization.png" alt="image"></p>
<h5 id="【实现关系】-是一种类与接口的关系，表示类是接口所有特征和行为的实现。"><a href="#【实现关系】-是一种类与接口的关系，表示类是接口所有特征和行为的实现。" class="headerlink" title="【实现关系】:是一种类与接口的关系，表示类是接口所有特征和行为的实现。"></a>【实现关系】:是一种类与接口的关系，表示类是接口所有特征和行为的实现。</h5><h5 id="【箭头指向】-带三角箭头的虚线，箭头指向接口。"><a href="#【箭头指向】-带三角箭头的虚线，箭头指向接口。" class="headerlink" title="【箭头指向】:带三角箭头的虚线，箭头指向接口。"></a>【箭头指向】:带三角箭头的虚线，箭头指向接口。</h5><p><img src="https://image.dullnull.org/realization.png" alt="image"></p>
<h5 id="【关联关系】-是一种拥有关系，它使得一个类知道另一个类的属性和方法。"><a href="#【关联关系】-是一种拥有关系，它使得一个类知道另一个类的属性和方法。" class="headerlink" title="【关联关系】:是一种拥有关系，它使得一个类知道另一个类的属性和方法。"></a>【关联关系】:是一种拥有关系，它使得一个类知道另一个类的属性和方法。</h5><h5 id="【代码体现】-成员变量"><a href="#【代码体现】-成员变量" class="headerlink" title="【代码体现】:成员变量"></a>【代码体现】:成员变量</h5><h5 id="【箭头指向】-带普通箭头的实线，指向被拥有者。双向的关联可以有两个箭头，或者没有箭头。单向的关联有一个箭头。"><a href="#【箭头指向】-带普通箭头的实线，指向被拥有者。双向的关联可以有两个箭头，或者没有箭头。单向的关联有一个箭头。" class="headerlink" title="【箭头指向】:带普通箭头的实线，指向被拥有者。双向的关联可以有两个箭头，或者没有箭头。单向的关联有一个箭头。"></a>【箭头指向】:带普通箭头的实线，指向被拥有者。双向的关联可以有两个箭头，或者没有箭头。单向的关联有一个箭头。</h5><p><img src="https://image.dullnull.org/association.png" alt="image"></p>
<h5 id="【聚合关系】-是一种整体与部分的关系。且部分可以离开整体而单独存在。聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关机。"><a href="#【聚合关系】-是一种整体与部分的关系。且部分可以离开整体而单独存在。聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关机。" class="headerlink" title="【聚合关系】:是一种整体与部分的关系。且部分可以离开整体而单独存在。聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关机。"></a>【聚合关系】:是一种整体与部分的关系。且部分可以离开整体而单独存在。聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关机。</h5><h5 id="【代码体现】-成员变量-1"><a href="#【代码体现】-成员变量-1" class="headerlink" title="【代码体现】:成员变量"></a>【代码体现】:成员变量</h5><h5 id="【箭头指向】-带空心菱形和普通箭头的实线，空心菱形指向整体，普通箭头指向部分。"><a href="#【箭头指向】-带空心菱形和普通箭头的实线，空心菱形指向整体，普通箭头指向部分。" class="headerlink" title="【箭头指向】:带空心菱形和普通箭头的实线，空心菱形指向整体，普通箭头指向部分。"></a>【箭头指向】:带空心菱形和普通箭头的实线，空心菱形指向整体，普通箭头指向部分。</h5><p><img src="https://image.dullnull.org/aggregation.png" alt="image"></p>
<h5 id="【组合关系】-是一种整体与部分的关系。但部分不能离开整体而单独存在，组合关系是关联关系的一种，是比聚合关系还要强的关系。"><a href="#【组合关系】-是一种整体与部分的关系。但部分不能离开整体而单独存在，组合关系是关联关系的一种，是比聚合关系还要强的关系。" class="headerlink" title="【组合关系】:是一种整体与部分的关系。但部分不能离开整体而单独存在，组合关系是关联关系的一种，是比聚合关系还要强的关系。"></a>【组合关系】:是一种整体与部分的关系。但部分不能离开整体而单独存在，组合关系是关联关系的一种，是比聚合关系还要强的关系。</h5><p><img src="https://image.dullnull.org/composition.png" alt="image"></p>
<h5 id="【代码体现】-成员变量-2"><a href="#【代码体现】-成员变量-2" class="headerlink" title="【代码体现】:成员变量"></a>【代码体现】:成员变量</h5><h5 id="【箭头指向】-带实心菱形和普通箭头的实线，实心菱形指向整体，普通箭头指向部分。"><a href="#【箭头指向】-带实心菱形和普通箭头的实线，实心菱形指向整体，普通箭头指向部分。" class="headerlink" title="【箭头指向】:带实心菱形和普通箭头的实线，实心菱形指向整体，普通箭头指向部分。"></a>【箭头指向】:带实心菱形和普通箭头的实线，实心菱形指向整体，普通箭头指向部分。</h5><h5 id="【依赖关系】-是一种使用关系，即一个类的实现需要另一个类的协助。"><a href="#【依赖关系】-是一种使用关系，即一个类的实现需要另一个类的协助。" class="headerlink" title="【依赖关系】:是一种使用关系，即一个类的实现需要另一个类的协助。"></a>【依赖关系】:是一种使用关系，即一个类的实现需要另一个类的协助。</h5><h5 id="【箭头指向】-带普通箭头的虚线，普通箭头指向被使用者。"><a href="#【箭头指向】-带普通箭头的虚线，普通箭头指向被使用者。" class="headerlink" title="【箭头指向】:带普通箭头的虚线，普通箭头指向被使用者。"></a>【箭头指向】:带普通箭头的虚线，普通箭头指向被使用者。</h5><p><img src="https://image.dullnull.org/dependency.png" alt="image"></p>
<h4 id="对象图"><a href="#对象图" class="headerlink" title="对象图"></a>对象图</h4><pre><code>【概念】类图的一个实例，描述系统在具体时间点上所包含的对象以及各个对象之间的关系
【描述方式】由对象（Object）和链(Link)组成
【目的】显示系统的静态结构，表示不同的实例是如何关联的
</code></pre><p><img src="https://image.dullnull.org/object-diagram.png" alt="image"></p>
<h4 id="序列图-也叫-时序图-顺序图"><a href="#序列图-也叫-时序图-顺序图" class="headerlink" title="序列图 也叫 时序图 顺序图"></a>序列图 也叫 时序图 顺序图</h4><pre><code>【概念】描述对象之间的交互顺序，主要提现对象间消息传递的时间先后顺序（时间）
【描述方式】
【目的】显示流程中不同对象之间的调用关系
</code></pre><p><img src="https://image.dullnull.org/sequence-diagram.png" alt="image"></p>
<h4 id="协作图-也叫作通讯图"><a href="#协作图-也叫作通讯图" class="headerlink" title="协作图 也叫作通讯图"></a>协作图 也叫作通讯图</h4><pre><code>【概念】描述了收发消息的对象的组织关系，强调对象之间的合作关系（空间）
【描述方式】
【目的】显示空间中不同对象的调用关系
</code></pre><p><img src="https://image.dullnull.org/communication-diagram.png" alt="image"></p>
<h4 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h4><pre><code>【概念】描述对象的所有状态以及事件发生而引起的状态之间的转移
【描述方式】
【目的】表示某个类所处的不同状态以及该类在这些状态中的转换过程
</code></pre><p><img src="https://image.dullnull.org/state-machine-diagram.png" alt="iamge"></p>
<h4 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h4><pre><code>【概念】描述满足用例要求所要进行的活动以及活动时间的约束关系
【描述方式】表示两个或者多个对象之间在处理某个活动时的过程控制流程
【目的】
</code></pre><p><img src="https://image.dullnull.org/activity-diagram.png" alt="iamge"></p>
<h4 id="构建图"><a href="#构建图" class="headerlink" title="构建图"></a>构建图</h4><pre><code>【概念】描述代码构建的物理结构以及各结构之间的依赖关系
【描述方式】
【目的】提供系统的物理视图，根据系统的代码构建显示系统代码的整个物理结构
</code></pre><p><img src="https://image.dullnull.org/component-diagram.png" alt="iamge"></p>
<h4 id="部署图"><a href="#部署图" class="headerlink" title="部署图"></a>部署图</h4><pre><code>【概念】系统中硬件的物理体系结构
【描述方式】
【目的】显示系统的硬件和软件的物理结构
</code></pre><p><img src="https://image.dullnull.org/deployment-diagram.png" alt="iamge"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础知识</title>
    <url>/2019/04/29/redis/</url>
    <content><![CDATA[<h3 id="Redis基本数据类型"><a href="#Redis基本数据类型" class="headerlink" title="Redis基本数据类型"></a>Redis基本数据类型</h3><h4 id="Binary-safe-strings"><a href="#Binary-safe-strings" class="headerlink" title="Binary-safe strings"></a>Binary-safe strings</h4><p>string 类型是二进制安全的.意思是redis的string可以包含任意数据,比如jgp图片或者已经序列化的的对象.</p>
<h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><p>实质是每一个都是string类型的双向链表,push和pop的命令算法的时间复杂度都是O(1),list还会记录链表的长度,所以llen操作也是O(1).</p>
<h4 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h4><p>是string类型的无序集合.set是通过 hash table实现的,所以添加,查找,删除的复杂度都是O(1),hash table 会随着添加或者删除自动调整大小.</p>
<h4 id="Sorted-sets"><a href="#Sorted-sets" class="headerlink" title="Sorted sets"></a>Sorted sets</h4><p>sorted sets 也是string类型元素的集合,不同的是每个元素都会关联一个double类型的score,元素顺序有score决定.sorted sets的实现是skip list和hash table的混合体.</p>
<a id="more"></a>
<h4 id="Hashes"><a href="#Hashes" class="headerlink" title="Hashes"></a>Hashes</h4><p>是string类型的field和value的映射表.它的添加和删除都是O(1).hash特别适合用于存储对象</p>
<h4 id="Bit-arrays"><a href="#Bit-arrays" class="headerlink" title="Bit arrays"></a>Bit arrays</h4><p>可以用特殊的命令,处理string的value,像处理一个位数组一样</p>
<h4 id="HyperLogLogs"><a href="#HyperLogLogs" class="headerlink" title="HyperLogLogs"></a>HyperLogLogs</h4><p>它是一个概率数据库.(用于估算集合的基数)</p>
<h3 id="Redis-基本命令"><a href="#Redis-基本命令" class="headerlink" title="Redis 基本命令"></a>Redis 基本命令</h3><h4 id="操作string的命令"><a href="#操作string的命令" class="headerlink" title="操作string的命令"></a>操作string的命令</h4><ul>
<li>set key value</li>
<li>get key value</li>
<li>mset key1 value1 key2 value2</li>
<li><p>mget key1 key2</p>
</li>
<li><p>incr key 对值做加加,返回新的值(对不存在的key返回1,对非intkey会报错)</p>
</li>
<li>decr key 对值做减减,返回新的值(对不存在的key返回1,对非intkey会报错)</li>
<li>incrby key integer 加指定值(key不存在会认为,原来的value为0)</li>
<li>decrby key integer 减指定值(key不存在会认为,原来的value为0)</li>
<li>append key value 给指定key的字符串追加value</li>
<li>substr key start end 返回截取过的key的字符串值,注意并不修改key,下标从0开始,区间前闭后闭</li>
</ul>
<h4 id="操作list的命令"><a href="#操作list的命令" class="headerlink" title="操作list的命令"></a>操作list的命令</h4><ul>
<li>lpush key string 在key对应的头部添加字符串元素,返回1代表成功,返回0表示key存在且不是list类型</li>
<li>rpush key string 在key对应的尾部添加字符串元素,返回1代表成功</li>
<li>lpop key 从list的头部删除元素,并返回删除的元素,如果list不存在或为空返回nil,如果不是list返回错误</li>
<li>rpop key 同上,但是从尾部删除</li>
<li>llen key 返回key对应list的长度,key不存在返回0,如果key对应的不是list返回错误</li>
<li>lrange key start end 返回指定区间内的元素,下标从0开始,负值表示从后面计算,-1表示倒数第一个元素,key不存在返回空列表</li>
<li>ltrim key start end 截取list,保留指定区间内元素,成功返回1,key不存在返回错误</li>
<li>lset key index value 设置list中指定下标的元素值,成功返回1,key或者下标不存在返回错误</li>
<li>linsert key before value value2在值value前插入值value2</li>
</ul>
<h4 id="操作sets的命令"><a href="#操作sets的命令" class="headerlink" title="操作sets的命令"></a>操作sets的命令</h4><ul>
<li>saad key value 添加一个string元素到key对应的set集合,成功返回1,如果元素已经在元素中返回0,可以对应的set不存在返回错误</li>
<li>srem key value 从key对应set中移除给定元素,成功返回1,如果value在集合中不存在或者key不存在返回0,key对应的不是set类型返回错误</li>
<li>spop 删除并返回set中一个随机元素,如果set是空或者key不存在返回nil</li>
<li>srandommembe key 同 spop,但是不删除元素</li>
</ul>
<h4 id="操作sorted-sets的命令"><a href="#操作sorted-sets的命令" class="headerlink" title="操作sorted sets的命令"></a>操作sorted sets的命令</h4><ul>
<li>zadd key score member 添加元素到集合,当member已存在,更新score</li>
<li>zrem key member 删除指定元素,1表示成功,如果不成功返回0</li>
</ul>
<h4 id="操作hashes的命令"><a href="#操作hashes的命令" class="headerlink" title="操作hashes的命令"></a>操作hashes的命令</h4><ul>
<li>hset key field value 设置hash field 为指定值,如果key不存在则先创建</li>
<li>hget key field 获取指定hash的hash field</li>
</ul>
<h3 id="Redis高级特性"><a href="#Redis高级特性" class="headerlink" title="Redis高级特性"></a>Redis高级特性</h3><h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p>设置redis密码,可以配置redis.conf也可以直接在redis-cli中设置<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">config set requirepass ******</span><br></pre></td></tr></table></figure></p>
<p>查看redis是否设置密码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">config get requirepass</span><br></pre></td></tr></table></figure></p>
<h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><p>Redis主从复制过程:</p>
<ul>
<li>slave和master建立连接,发送sync同步命令</li>
<li>master会启动一个后台线程,将数据库线程保存到文件中,同时master主线程会开始收集新的写命令缓存.</li>
<li>后台完成保存后,就将此文件发送给slave</li>
<li>slave将此文件保存到硬盘上</li>
</ul>
<h4 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h4><ul>
<li><p>redis对事务的支持比较简单,redis只能保证一个client发起的事务中的命令可以连续执行,而中间不会插入其他的client命令.当一个client在发出multi命令时,这个连接会进入一个事务的上下文,连续后续命令不会立即执行,而是先放到一个队列中,当执行exec命令时,redis会顺序执行队列中的所有命令.</p>
</li>
<li><p>redis在事务中发生错误不会回滚.</p>
</li>
</ul>
<h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>redis提供了一系列不同的持久化选项:</p>
<ul>
<li>RDB持久化方式会在一个特定的间隔保存那个时间点的一个数据快照.</li>
<li>AOF持久化方式则会记录每一个服务器收到的写操作。在服务启动时，这些记录的操作会逐条执行从而重建出原来的数据。写操作命令记录的格式跟Redis协议一致，以追加的方式进行保存.</li>
</ul>
<h4 id="发布订阅消息"><a href="#发布订阅消息" class="headerlink" title="发布订阅消息"></a>发布订阅消息</h4><p>发布订阅（pub/sub）是一种消息通知模式，主要的目的是截除消息发布者和消息订阅者之间的耦合，Redis作为一个pub/sub的server，在订阅者和发布者之间起到了消息路由的功能。订阅者可以通过subscribe和psubscribe命令向redis server订阅自己感兴趣的消息类型，redis将消息类型称为通道（channel）.当发布者通过publish命令向redis server发送特定类型的信息时，订阅该信息类型的全部client都会收到此消息.</p>
<h4 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h4><p>Redis的虚拟内存与操作系统的虚拟内存不是一回事，但是思路和目的都是相同的.就是暂时把不经常访问的数据从内存交换到磁盘中，从而腾出宝贵的内存空间用于其他需要访问的数据.尤其是对于redis这样的内存数据库，内存总是不够用的.除了可以将数据分割到多个redis server外.另外能够提高数据库容量的办法就是使用虚拟内存把那些不经常访问的数据交换到磁盘上.</p>
<h3 id="Redis集成Spring-Boot"><a href="#Redis集成Spring-Boot" class="headerlink" title="Redis集成Spring Boot"></a>Redis集成Spring Boot</h3><p>pom文件添加redis依赖<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- redis --&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt; </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<p>application.properties增加redis相关属性<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#redis  </span><br><span class="line">spring.redis.hostName=goodgoodstate.me</span><br><span class="line">spring.redis.port=<span class="number">6379</span>    </span><br><span class="line">spring.redis.password=xxx  </span><br><span class="line">spring.redis.pool.maxActive=<span class="number">8</span>    </span><br><span class="line">spring.redis.pool.maxWait=-<span class="number">1</span>    </span><br><span class="line">spring.redis.pool.maxIdle=<span class="number">8</span>    </span><br><span class="line">spring.redis.pool.minIdle=<span class="number">0</span>    </span><br><span class="line">spring.redis.timeout=<span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<p>配置类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value =&#123; StringRedisTemplate.class, RedisTemplate.class&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">redisTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"><span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Java操作Redis"><a href="#Java操作Redis" class="headerlink" title="Java操作Redis"></a>Java操作Redis</h3><p>设置Redis中String类型的键值对,600秒自动失效<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redisTemplate.opsForValue().set(<span class="string">"key"</span>, <span class="string">"value"</span>, <span class="number">600</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure></p>
<p>获取Redis中String类型的value<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String value = (String) redisTemplate.opsForValue().get(<span class="string">"key"</span>);</span><br></pre></td></tr></table></figure></p>
<p>获取操作Hash对象<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashOperations&lt;String, String, String&gt; hashOperations = redisTemplate.opsForHash();</span><br></pre></td></tr></table></figure></p>
<p>put一个map对象<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hashOperations.putAll(key, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br></pre></td></tr></table></figure></p>
<p>获取一个hash里面的maspKey对应的值<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String value = hashOperations.get(<span class="string">"key"</span>, <span class="string">"mapKey"</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL语句学习总结</title>
    <url>/2019/04/22/mysql/</url>
    <content><![CDATA[<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure>
<h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p>（1）第一范式（每列都保持原子性)<br>（2）第二范式（非主属性不部分依赖于候选码）<br>（3）第三范式（非主属性不传递依赖于候选码）<br>（4）BC范式（任何属性不部分依赖与候选码，不传递依赖与候选码）</p>
<h3 id="创建表SQL"><a href="#创建表SQL" class="headerlink" title="创建表SQL"></a>创建表SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line"><span class="string">`age`</span> <span class="built_in">INT</span> ,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="更新表中数据SQL"><a href="#更新表中数据SQL" class="headerlink" title="更新表中数据SQL"></a>更新表中数据SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> user.name = <span class="string">"lisheng"</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="查询表中数据的SQL"><a href="#查询表中数据的SQL" class="headerlink" title="查询表中数据的SQL"></a>查询表中数据的SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user.name , user.age <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<h3 id="插入表中数据的SQL"><a href="#插入表中数据的SQL" class="headerlink" title="插入表中数据的SQL"></a>插入表中数据的SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span> ,<span class="keyword">name</span> ,age) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">"lisheng"</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> user.name ,good.name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">join</span> good <span class="keyword">on</span> user.id = good.user_id;</span><br></pre></td></tr></table></figure>
<h3 id="删除表中数据的SQL"><a href="#删除表中数据的SQL" class="headerlink" title="删除表中数据的SQL"></a>删除表中数据的SQL</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mysqldump -u dbuser -p dbname &gt; dbname.sql   <span class="comment">// 在/usr/local/mysql/bin目录执行</span></span><br></pre></td></tr></table></figure>
<h3 id="导入sql数据库"><a href="#导入sql数据库" class="headerlink" title="导入sql数据库"></a>导入sql数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">source /home/abc/abc.sql;  // 登录到数据库内执行</span><br></pre></td></tr></table></figure>
<h3 id="查看数据库表的编码格式"><a href="#查看数据库表的编码格式" class="headerlink" title="查看数据库表的编码格式"></a>查看数据库表的编码格式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">table</span>-<span class="keyword">name</span>;</span><br></pre></td></tr></table></figure>
<h3 id="设置字段默认值"><a href="#设置字段默认值" class="headerlink" title="设置字段默认值"></a>设置字段默认值</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ALTER</span>  <span class="keyword">COLUMN</span> <span class="keyword">name</span> <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="string">""</span> ;</span><br></pre></td></tr></table></figure>
<h3 id="修改表字段"><a href="#修改表字段" class="headerlink" title="修改表字段"></a>修改表字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> address <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> city <span class="built_in">CHAR</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<h3 id="增加一个表的一个字段"><a href="#增加一个表的一个字段" class="headerlink" title="增加一个表的一个字段"></a>增加一个表的一个字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> wechat_auth <span class="keyword">ADD</span> user_id <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br></pre></td></tr></table></figure>
<h3 id="时间日期格式化"><a href="#时间日期格式化" class="headerlink" title="时间日期格式化"></a>时间日期格式化</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DATE_FORMAT(t1.create_time,'%Y-%c-%d %h:%i:%s') </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">### 创建索引</span></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> tbl_name</span><br></pre></td></tr></table></figure>
<h3 id="导入cvs文件"><a href="#导入cvs文件" class="headerlink" title="导入cvs文件"></a>导入cvs文件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> <span class="keyword">INFILE</span> <span class="string">'[FILE]'</span>  </span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> [<span class="keyword">TABLE</span>]；  </span><br><span class="line">或者  </span><br><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> <span class="keyword">INFILE</span> <span class="string">'[FILE]'</span>  </span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">TABLE</span> [<span class="keyword">TABLE</span>]  </span><br><span class="line"><span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span>   </span><br><span class="line"><span class="keyword">OPTIONALLY</span> <span class="keyword">ENCLOSED</span> <span class="keyword">BY</span> <span class="string">'"'</span>   </span><br><span class="line"><span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\n'</span>；</span><br></pre></td></tr></table></figure>
<h3 id="导出cvs文件"><a href="#导出cvs文件" class="headerlink" title="导出cvs文件"></a>导出cvs文件</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">TABLE</span>]  </span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'[FILE]'</span>；  </span><br><span class="line">或者  </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">TABLE</span>]  </span><br><span class="line"><span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'[FILE]'</span>  </span><br><span class="line"><span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span>   </span><br><span class="line"><span class="keyword">OPTIONALLY</span> <span class="keyword">ENCLOSED</span> <span class="keyword">BY</span> <span class="string">'"'</span>   </span><br><span class="line"><span class="keyword">LINES</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\n'</span>；</span><br></pre></td></tr></table></figure>
<h3 id="查询指定字段重复的记录"><a href="#查询指定字段重复的记录" class="headerlink" title="查询指定字段重复的记录"></a>查询指定字段重复的记录</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> mobile <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(mobile)&gt;<span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> create_time <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure>
<h3 id="当数据库中不存在该记录的时候插入"><a href="#当数据库中不存在该记录的时候插入" class="headerlink" title="当数据库中不存在该记录的时候插入"></a>当数据库中不存在该记录的时候插入</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`table`</span> (value1, value2)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">'stuff for value1'</span>,</span><br><span class="line"><span class="string">'stuff for value2'</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`table`</span></span><br><span class="line"><span class="keyword">WHERE</span> value1 = <span class="string">'stuff for value1'</span> <span class="keyword">AND</span> value2 = <span class="string">'stuff for value2'</span>)</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>例子<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`t_test`</span> (<span class="keyword">id</span>, <span class="keyword">name</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="string">'李胜'</span></span><br><span class="line"><span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`t_test`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">AND</span> <span class="keyword">name</span> = <span class="string">'李胜'</span>)</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="给表中两个字段添加唯一性约束"><a href="#给表中两个字段添加唯一性约束" class="headerlink" title="给表中两个字段添加唯一性约束"></a>给表中两个字段添加唯一性约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table`</span> <span class="keyword">ADD</span> <span class="keyword">unique</span> <span class="keyword">unique</span>-<span class="keyword">name</span> (column1,column2);</span><br></pre></td></tr></table></figure>
<h3 id="删除唯一性约束"><a href="#删除唯一性约束" class="headerlink" title="删除唯一性约束"></a>删除唯一性约束</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP KEY 约束名;</span><br></pre></td></tr></table></figure>
<h3 id="inner-join-和left-join区别"><a href="#inner-join-和left-join区别" class="headerlink" title="inner join 和left join区别"></a>inner join 和left join区别</h3><p>left join (左连接) 返回包括左表中所有记录和右表中连接字段相等的记录<br><br>right join (右连接) 返回包括右表中所有记录和左表中连接字段相等的记录<br><br>inner join (等值连接) 只返回两个表中连接字段相等的记录</p>
<h3 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h3><ol>
<li>查询 seeker_job  去掉 seeker_job_suggest  关联</li>
<li>优化模糊查询 改用单 like% reverse函数建立反向索引</li>
<li>范围模糊查询 自增id优于uuid  使用count(1)也是自增id更好</li>
<li>在适当的地方添加索引   （MySQL仅能对索引最左边的前缀进行有效的查找）</li>
<li>where语句后面的顺序 以及 建立 索引的顺序  （最左前缀匹配原则）</li>
<li>（尽量选择区分度高的列作为索引。）( = 和 in 可以乱序)</li>
<li>（尽量扩展索引，少去新建索引）</li>
<li>不以通配符开头的sql语句 like “%aaa” ALL 全表扫描 like “aaaa%” range 索引</li>
<li>尽量避免 null值判断 应该使用 0 默认值的 方法</li>
<li>避免 select * </li>
<li>order by语句后面跟索引   排序的顺序 很重要 很重要</li>
<li>提高GROUP BY 语句的效率, 可以通过将不需要的记录在GROUP BY 之前过滤掉</li>
<li>能用DISTINCT的就不用GROUP BY</li>
</ol>
<h3 id="查看编码"><a href="#查看编码" class="headerlink" title="查看编码"></a>查看编码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">'%char%'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="查看表编码"><a href="#查看表编码" class="headerlink" title="查看表编码"></a>查看表编码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">show create table &lt;表名&gt;;</span><br><span class="line"></span><br><span class="line">例：show create table user;</span><br></pre></td></tr></table></figure>
<h3 id="查看字段编码"><a href="#查看字段编码" class="headerlink" title="查看字段编码"></a>查看字段编码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">show full columns from &lt;表名&gt;;</span><br><span class="line"></span><br><span class="line">例： show full column from user;</span><br></pre></td></tr></table></figure>
<h3 id="修改数据库编码格式"><a href="#修改数据库编码格式" class="headerlink" title="修改数据库编码格式"></a>修改数据库编码格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">alter database &lt;数据库名&gt; character set utf8mb4;</span><br><span class="line">例：alter database db_user character set utf8mb4;</span><br></pre></td></tr></table></figure>
<h3 id="修改表编码"><a href="#修改表编码" class="headerlink" title="修改表编码"></a>修改表编码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">alter table &lt;表名&gt; character set utf8mb4;</span><br><span class="line">例：alter table user character set utf8mb4;</span><br></pre></td></tr></table></figure>
<h3 id="修改字段编码"><a href="#修改字段编码" class="headerlink" title="修改字段编码"></a>修改字段编码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; MODIFY COLUMN &lt;字段名&gt; &lt;字段类型&gt; CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line">例：<span class="function">ALTER TABLE comment MODIFY COLUMN content <span class="title">VARCHAR</span><span class="params">(<span class="number">512</span>)</span> CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci</span>;</span><br></pre></td></tr></table></figure>
<h3 id="查询sql不走缓存"><a href="#查询sql不走缓存" class="headerlink" title="查询sql不走缓存"></a>查询sql不走缓存</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SELECT SQL_NO_CACHE * FROM users;</span><br></pre></td></tr></table></figure>
<h3 id="修改表字符集和校对集"><a href="#修改表字符集和校对集" class="headerlink" title="修改表字符集和校对集"></a>修改表字符集和校对集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ALTER  TABLE user</span><br><span class="line">CHARACTER SET utf8mb4</span><br><span class="line">COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>
<h3 id="修改数据库字符集和校对集"><a href="#修改数据库字符集和校对集" class="headerlink" title="修改数据库字符集和校对集"></a>修改数据库字符集和校对集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE mydata</span><br><span class="line">CHARACTER SET utf8mb4</span><br><span class="line">COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>
<h3 id="修改表字段相关信息"><a href="#修改表字段相关信息" class="headerlink" title="修改表字段相关信息"></a>修改表字段相关信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ALTER TABLE `job_auth_record` CHANGE `id` `id` VARCHAR(<span class="number">32</span>) CHARACTER SET utf8mb4 NOT NULL COMMENT <span class="string">'主键id'</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Mysql-ASC-和-DESC-索引-怎么走的-？？？"><a href="#Mysql-ASC-和-DESC-索引-怎么走的-？？？" class="headerlink" title="Mysql ASC 和 DESC 索引 怎么走的 ？？？"></a>Mysql ASC 和 DESC 索引 怎么走的 ？？？</h3><h3 id="分组差查询数量-超级吊"><a href="#分组差查询数量-超级吊" class="headerlink" title="分组差查询数量  超级吊"></a>分组差查询数量  超级吊</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">company_id,</span><br><span class="line">count(*) AS counts</span><br><span class="line">FROM seeker_job</span><br><span class="line"><span class="function">WHERE company_id <span class="title">IN</span> <span class="params">(<span class="string">"8a9c889c5dcbe37c015dcf16e284001f"</span>, <span class="string">"04be17537c5e4b299c135eeaadb5e131"</span>)</span></span></span><br><span class="line"><span class="function">GROUP BY company_id</span>;</span><br></pre></td></tr></table></figure>
<h3 id="修改校验集"><a href="#修改校验集" class="headerlink" title="修改校验集"></a>修改校验集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ALTER TABLE insurance_insured CONVERT TO CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line">ALTER  TABLE insurance_insured CHARACTER SET utf8mb4;</span><br><span class="line"></span><br><span class="line">ALTER TABLE `insurance_insured` CHANGE `name` `name`  varchar(<span class="number">64</span>) COLLATE utf8mb4_general_ci DEFAULT NULL;</span><br></pre></td></tr></table></figure>
<h3 id="忽略某个索引"><a href="#忽略某个索引" class="headerlink" title="忽略某个索引"></a>忽略某个索引</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SELECT * <span class="function">FROM seeker_job IGNORE <span class="title">INDEX</span><span class="params">(idx_modify_time)</span></span></span><br></pre></td></tr></table></figure>
<h4 id="DISTINCT-COUNT"><a href="#DISTINCT-COUNT" class="headerlink" title="DISTINCT COUNT"></a>DISTINCT COUNT</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">SELECT  <span class="title">count</span><span class="params">(DISTINCT j1.job_id,j1.agent_company_id)</span></span></span><br><span class="line"><span class="function">FROM job_agent j1 INNER JOIN job_agent j2 ON j1.job_id </span>= j2.job_id AND j1.agent_company_id = j2.agent_company_id AND j1.id != j2.id ;</span><br></pre></td></tr></table></figure>
<h4 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SELECT  DISTINCT j1.job_id,j1.agent_company_id</span><br><span class="line">FROM job_agent j1 INNER JOIN job_agent j2 ON j1.job_id = j2.job_id AND j1.agent_company_id = j2.agent_company_id AND j1.id != j2.id ;</span><br></pre></td></tr></table></figure>
<h4 id="查找重复字段记录"><a href="#查找重复字段记录" class="headerlink" title="查找重复字段记录"></a>查找重复字段记录</h4><p><a href="https://www.cnblogs.com/jiangxiaobo/p/6589541.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiangxiaobo/p/6589541.html</a></p>
<h3 id="修改表编码个字符集"><a href="#修改表编码个字符集" class="headerlink" title="修改表编码个字符集"></a>修改表编码个字符集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ALTER  TABLE apply_stencil CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="function">ALTER TABLE apply_stencil MODIFY COLUMN id <span class="title">VARCHAR</span><span class="params">(<span class="number">32</span>)</span> CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ALTER TABLE apply_stencil MODIFY COLUMN apply_id <span class="title">VARCHAR</span><span class="params">(<span class="number">32</span>)</span> CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci</span>;</span><br></pre></td></tr></table></figure>
<h3 id="查询一个库里面有多少表"><a href="#查询一个库里面有多少表" class="headerlink" title="查询一个库里面有多少表"></a>查询一个库里面有多少表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">SELECT <span class="title">COUNT</span><span class="params">(*)</span> TABLES, table_schema FROM information_schema.TABLES  WHERE table_schema </span>= <span class="string">'goabroad'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim学习</title>
    <url>/2019/04/15/vim/</url>
    <content><![CDATA[<h4 id="Vim学习笔记"><a href="#Vim学习笔记" class="headerlink" title="Vim学习笔记"></a>Vim学习笔记</h4><h4 id="Vim三种模式"><a href="#Vim三种模式" class="headerlink" title="Vim三种模式"></a>Vim三种模式</h4><p>基本上vi分为三种模式，分别是一般模式、编辑模式与命令行模式</p>
<h5 id="一般模式"><a href="#一般模式" class="headerlink" title="一般模式"></a>一般模式</h5><p>打开一个文件默认就进入到一般模式（这是默认的模式）。在这个模式中你可以使用上下左右了来移动光标，你可以删除字符或者删除整行，也可以复制粘贴你的文件数据。</p>
<h5 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h5><p>在vi一般模式下，不能进行编辑。等到按下a、s、i、o、c之后，就会进入编辑模式。左下方会出现INSERT或REPLAC的字样，此时才可以进行编辑。若想要退出编辑模式，需要按ESC。</p>
<h5 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h5><p>在一般模式中输入，“:、/、？”3个中的任何一个按钮，就可以将光标移动到最下面那一行。</p>
<a id="more"></a>
<h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hjkl 左下上右</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ctrl+f  pagedown 向下翻页</span><br><span class="line">ctrl+b  pageup 向上翻页</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>  home  移动到当前行最前</span><br><span class="line">n 空格  移动n个字符</span><br><span class="line">$  end  移动到当前行最后</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">G 移动到文件最末行</span><br><span class="line">nG 移动到第n行</span><br><span class="line">gg 首行</span><br><span class="line">n+enter  向下移动n行</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">:n1,n2s/word1/word2/g     在n1到n2之间找到word1，并将wor1替换为word2</span><br><span class="line">:<span class="number">1</span>,$s/word1/word2/g       在第一行到最后一行查找word1，并替换为word2</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x,X     x向前删除   X向后删除</span><br><span class="line">nx      n为数字     连续向后删除n个字符</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dd 删除光标所在的整行</span><br><span class="line">ndd 删除所在的向下的几行</span><br><span class="line">d1G 删除光标所在到第一行的所有数据</span><br><span class="line">dg  删除从光标所在到最后一行的所有数据</span><br><span class="line">d$  删除从光标所在处到该行的最后一个字符</span><br><span class="line">d0  删除从光标所在出到该行的最前面一个字符</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">yy  复制光标所在的那一行</span><br><span class="line">nyy  复制光标所在的向下n行</span><br><span class="line">p,P   p将已复制的数据在光标下一行粘贴，P将已复制的数据在光标上一行粘贴</span><br><span class="line">y1G   复制光标所在行到第一行的所有数据</span><br><span class="line">yG   复制光标所在行到最后一行的所有数据</span><br><span class="line">y0   复制光标所在的那个字符到该行行首的所有数据</span><br><span class="line">y$   复制光标所在的那个字符到该行行尾的所有数据</span><br></pre></td></tr></table></figure>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常规模式  /   进行搜索</span><br><span class="line">u撤销刚才得到动作</span><br><span class="line">ctrl+r是撤销刚才撤销的动作</span><br><span class="line">ctrl+u 删除当前行</span><br><span class="line">yy复制当前行</span><br><span class="line">dd删除当前行</span><br><span class="line">p粘贴</span><br><span class="line">u撤销</span><br><span class="line">查找 </span><br><span class="line">/pattern  往后查找</span><br><span class="line">?pattern  向前查找</span><br><span class="line">n下一个</span><br><span class="line">N上一个</span><br><span class="line">ggVG 全选 gg到起始行</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>CURL工具学习</title>
    <url>/2019/04/08/curl/</url>
    <content><![CDATA[<h3 id="curl是什么"><a href="#curl是什么" class="headerlink" title="curl是什么"></a>curl是什么</h3><p>curl (Command Line URL viewer)是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在“标准输出”（stdout）上面。</p>
<h4 id="查看网页源码"><a href="#查看网页源码" class="headerlink" title="查看网页源码"></a>查看网页源码</h4><p>直接在curl后面加上网址，就可以看到网页源码。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl dullnull.org</span><br></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=<span class="string">"white"</span>&gt;</span><br><span class="line">&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The requested resource has been assigned a new permanent URI.&lt;/p&gt;</span><br><span class="line">&lt;hr/&gt;Powered by Tengine&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果要保存这个网页，可以使用 -o 参数<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -o fileName dullnull.org</span><br></pre></td></tr></table></figure></p>
<h4 id="自动跳转"><a href="#自动跳转" class="headerlink" title="自动跳转"></a>自动跳转</h4><p>有的网页是自动跳转的。使用 -L 参数，curl就会跳转到新的网址。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -L dullnull.org</span><br></pre></td></tr></table></figure></p>
<p>键入上面命令，就会直接跳转到<a href="https://dullnull.org" target="_blank" rel="noopener">https://dullnull.org</a></p>
<h4 id="显示头信息"><a href="#显示头信息" class="headerlink" title="显示头信息"></a>显示头信息</h4><p>-i 参数可以显示http response 的头信息，连同网页代码一起。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -i dullnull.org</span><br></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">301</span> Moved Permanently</span><br><span class="line">Server: Tengine</span><br><span class="line">Date: Sat, <span class="number">13</span> Apr <span class="number">2019</span> <span class="number">08</span>:<span class="number">55</span>:<span class="number">26</span> GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: <span class="number">278</span></span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: https:<span class="comment">//dullnull.org/</span></span><br><span class="line">Via: kunlun8.cn314[,<span class="number">0</span>]</span><br><span class="line">Timing-Allow-Origin: *</span><br><span class="line">EagleId: ca6cf99c15551457264052744e</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//IETF//DTD HTML 2.0//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=<span class="string">"white"</span>&gt;</span><br><span class="line">&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;The requested resource has been assigned a new permanent URI.&lt;/p&gt;</span><br><span class="line">&lt;hr/&gt;Powered by Tengine&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="显示通信过程"><a href="#显示通信过程" class="headerlink" title="显示通信过程"></a>显示通信过程</h4><p>-v 参数可以显一次http通信的整个过程，包括端口连接和http request 头信息。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -v dullnull.org</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* Rebuilt URL to: dullnull.org/</span><br><span class="line">*   Trying <span class="number">202.108</span>.249.197...</span><br><span class="line">* Connected to dullnull.org (202.108.249.197) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/<span class="number">1.1</span></span><br><span class="line">&gt; Host: dullnull.org</span><br><span class="line">&gt; User-Agent: curl/<span class="number">7.47</span>.0</span><br><span class="line">&gt; Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">&gt; </span></span><br><span class="line"><span class="comment">&lt; HTTP/1.1 301 Moved Permanently</span></span><br><span class="line"><span class="comment">&lt; Server: Tengine</span></span><br><span class="line"><span class="comment">&lt; Date: Sat, 13 Apr 2019 08:57:09 GMT</span></span><br><span class="line"><span class="comment">&lt; Content-Type: text/html</span></span><br><span class="line"><span class="comment">&lt; Content-Length: 278</span></span><br><span class="line"><span class="comment">&lt; Connection: keep-alive</span></span><br><span class="line"><span class="comment">&lt; Location: https://dullnull.org/</span></span><br><span class="line"><span class="comment">&lt; Via: kunlun8.cn314[,0]</span></span><br><span class="line"><span class="comment">&lt; Timing-Allow-Origin: *</span></span><br><span class="line"><span class="comment">&lt; EagleId: ca6cf99c15551458295975589e</span></span><br><span class="line"><span class="comment">&lt; </span></span><br><span class="line"><span class="comment">&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;</span></span><br><span class="line"><span class="comment">&lt;html&gt;</span></span><br><span class="line"><span class="comment">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="comment">&lt;body bgcolor="white"&gt;</span></span><br><span class="line"><span class="comment">&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;The requested resource has been assigned a new permanent URI.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;hr/&gt;Powered by Tengine&lt;/body&gt;</span></span><br><span class="line"><span class="comment">&lt;/html&gt;</span></span><br><span class="line"><span class="comment">* Connection #0 to host dullnull.org left intact</span></span><br></pre></td></tr></table></figure>
<p>如果你觉得上面的信息还不够，可以使用<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl --trace output.txt</span><br></pre></td></tr></table></figure></p>
<p>运行后，打开output.txt 查看</p>
<h4 id="发送表单信息"><a href="#发送表单信息" class="headerlink" title="发送表单信息"></a>发送表单信息</h4><p>GET请求<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl example.com/form.cgi?data=xxx</span><br></pre></td></tr></table></figure></p>
<p>POST请求<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -X POST --data <span class="string">"data=xxx"</span> example.com/form.cgi</span><br></pre></td></tr></table></figure></p>
<h4 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h4><p>curl默认动词是GET，使用 -X 参数 可以支持其他参数<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -X POST dullnull.org</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -X PUT dullnull.org</span><br></pre></td></tr></table></figure>
<h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -T file.txt url</span><br></pre></td></tr></table></figure>
<h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl --referer http:<span class="comment">//www.example.com http://www.example.com</span></span><br></pre></td></tr></table></figure>
<h3 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User Agent"></a>User Agent</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl --user-agent <span class="string">"[User Agent]"</span> [URL]</span><br></pre></td></tr></table></figure>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl --cookie <span class="string">"name=xxx"</span> www.example.com</span><br></pre></td></tr></table></figure>
<h3 id="增加头信息"><a href="#增加头信息" class="headerlink" title="增加头信息"></a>增加头信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl --header <span class="string">"Content-Type:application/json"</span> http:<span class="comment">//example.com</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>CURL</tag>
      </tags>
  </entry>
  <entry>
    <title>RestFul API设计指南</title>
    <url>/2019/04/01/restful/</url>
    <content><![CDATA[<h3 id="RESTful是什么"><a href="#RESTful是什么" class="headerlink" title="RESTful是什么"></a>RESTful是什么</h3><p>REST（Representational State Transfe）是一种架构风格，遵循REST原则的架构我们就称为RESTful架构。Representational State Transfe 直译过来就是【表现层状态转化】，其实它省略了主语，表现层指的是【资源】的表现层，通俗的讲就是：资源在网络中以某种形式进行状态转移。</p>
<h3 id="为什么要用RESTful"><a href="#为什么要用RESTful" class="headerlink" title="为什么要用RESTful"></a>为什么要用RESTful</h3><p>RESTful 给人的感觉是优雅、规范、易懂，一个结构清晰、易于理解的API完全可以省略许多无意义的沟通和文档。大家都使用相同的标准，有利于团队的整体效率。</p>
<h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>一般接口就是增删改查，RESTful API就像通用的模板，我们以文章（Article）举例，那么基础的URL就有一下几种：</p>
<ul>
<li><code>GET /articles:</code> 文章列表</li>
<li><code>GET /articles/id:</code> 文章详情</li>
<li><code>POST /articles:</code> 创建文章</li>
<li><code>PUT /articles/id:</code> 修改文章</li>
<li><code>DELETE /articles/id:</code> 删除文章</li>
</ul>
<p>RESTful 中使用GET、POST、PUT和DELETE来分别表示资源的查询、创建、更新和删除，并且除了POST其他三种都具备幂等性（多次请求效果相同），POST和PUT最大的区别就是幂等性，所以PUT也可以用于创建，只要在创建前就确定好资源的id。</p>
<a id="more"></a>
<p>将id放到URL中而不是Query Param的其中一个好处是可以表示资源之间的层级关系，例如文章下面会有评论（Comment）和点赞（Like），这两项资源必然会属于一篇文章，所以它们的URL应该是这样的：</p>
<ul>
<li><code>GET /articles/aid/comments:</code> 某篇文章的评论列表</li>
<li><code>GET /comments/cid:</code> 获取某文章的某评论详情</li>
<li><code>POST /articles/aid/comments:</code> 在某篇文章中创建评论</li>
<li><code>PUT /comments/cid:</code> 修改评论</li>
<li><code>PUT /comments/cid:</code> 删除评论</li>
</ul>
<p>这里有一点比较特殊，永远去使用可以指向资源的最短URL路径，也就是说既然<code>/comments/cid:</code>已经可以指向一条评论了，就不需要<code>/articles/id/comments/cid:</code>特意的指出所属的文章了。</p>
<ul>
<li><code>GET /articles/id/like:</code> 查看文章是否被点赞</li>
<li><code>PUT /articles/id/like:</code> 点赞文章</li>
<li><code>DELETE /articles/id/like:</code> 取消点赞</li>
</ul>
<h3 id="接口版本"><a href="#接口版本" class="headerlink" title="接口版本"></a>接口版本</h3><p>随着业务的调整，可能老接口不能再满足业务需求。这个时候我们尽可能加字段，或者新加接口。例如：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">api.github.com/v1/users</span><br></pre></td></tr></table></figure></p>
<h3 id="Token和Sign"><a href="#Token和Sign" class="headerlink" title="Token和Sign"></a>Token和Sign</h3><p>API需要设计成无状态的，所以客户端在某些请求中需要带上token或者sign。</p>
<ul>
<li>Token 用于监听请求所属用户，一般都是服务端在登录后随机生成一段字符串（UUID）和登录用户进行绑定，再将其返回给客户端。Token的状态保持一般有两种方式实现：一种是在用户每次操作都会延长或者重置TOKEN生存时间（类似于缓存的机制），另一种是TOKEN的生存时长固定不变。</li>
<li>Sign 用于证明该次请求合理，所以一般客户端会把请求参数拼接后加密作为Sign传给服务端，这样即使被抓包了，对方修改参数而无法生成对应Sign也会被识破。</li>
</ul>
<h3 id="业务参数"><a href="#业务参数" class="headerlink" title="业务参数"></a>业务参数</h3><p>搜索<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/users/?query=iisheng</span><br></pre></td></tr></table></figure></p>
<p>过滤<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/users/?gender=<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h3 id="统计参数"><a href="#统计参数" class="headerlink" title="统计参数"></a>统计参数</h3><p>这个一般可能的实现方案，是在行为接口后面添加参数像，业务参数一样，还有一种实现方案是单独写一个接口，只做统计用，我感觉这种方式更好一些。</p>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/users/?offset=<span class="number">10</span>&amp;limit=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/articles/?cursor=<span class="number">2015</span>-<span class="number">01</span>-<span class="number">01</span> <span class="number">15</span>:<span class="number">20</span>:<span class="number">30</span>&amp;limit=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/users/?page=<span class="number">2</span>&amp;pre_page=<span class="number">20</span></span><br></pre></td></tr></table></figure>
<h3 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h3><ol>
<li>Json比Xml可视化更好，也更省流量所以尽量使用Json。</li>
<li>创建和修改成功后需要返回该资源的全部信息。</li>
<li>返回数据不需要和客户端界面耦合。不要在API设计的时候就考虑少返回几个字段，少一次查询（比如用join）能带来多大性能提升。一定要以资源为单位，即使客户端一个页面需要展示多个资源，也不要在一个接口中全部返回。而是让客户端分别请求多个接口（也可以使用一个单独的服务（API网关），内部RPC调用基础服务，构造客户端需要的数据，返回给客户端，这样，客户端可以只调用少量接口）</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>RESTFul</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet源码解析</title>
    <url>/2019/03/25/servlet/</url>
    <content><![CDATA[<h3 id="一个简单的Servlet请求"><a href="#一个简单的Servlet请求" class="headerlink" title="一个简单的Servlet请求"></a>一个简单的Servlet请求</h3><ol>
<li>新建HelloController继承HttpServlet</li>
<li>在web.xml中，注册HelloController，或者使用@WebServlet注解注册HelloController</li>
<li>重写doGet()，doPost()或者其他doXxx()方法</li>
</ol>
<h3 id="Servlet请求参数"><a href="#Servlet请求参数" class="headerlink" title="Servlet请求参数"></a>Servlet请求参数</h3><p>HttpServletRequest和HttpServletResponse是doXxx()方法的默认参数。</p>
<h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><p>HttpServletRequest代表浏览器发送给服务器的请求报文。该对象由web服务器创建（如Tomcat），最终作为参数传递到doXxx()或者其他方法中，我们可以在doXxx()方法中直接使用</p>
<ol>
<li><p>获取用户发送的请求参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getParmater(<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取项目的名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getContextPath();</span><br></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol start="3">
<li>作为一个域对象，在不同的web资源之间共享数据。</li>
<li>请求和转发<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"target.html"</span>).forward(request,response);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>HttpServletResponse代表服务器发送给浏览器的响应报文。该对象由web服务器创建（如Tomcat），最终将作为参数传递到doXxx()方法中，我们可以在doXxx()方法中直接使用。</p>
<ol>
<li><p>响应给浏览器一个网页或者Json数据等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintWriter printWriter = response.getWriter();</span><br><span class="line">printWriter.writer(Hello Servlet~);</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求的重定向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"target.html"</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="转发和重定向的区别"><a href="#转发和重定向的区别" class="headerlink" title="转发和重定向的区别"></a>转发和重定向的区别</h3><table>
<thead>
<tr>
<th></th>
<th style="text-align:center">转发</th>
<th style="text-align:right">重定向</th>
</tr>
</thead>
<tbody>
<tr>
<td>请求的次数</td>
<td style="text-align:center">1</td>
<td style="text-align:right">2</td>
</tr>
<tr>
<td>发生的位置</td>
<td style="text-align:center">服务器内部</td>
<td style="text-align:right">浏览器</td>
</tr>
<tr>
<td>浏览器地址</td>
<td style="text-align:center">不改变</td>
<td style="text-align:right">改变</td>
</tr>
</tbody>
</table>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>通过实现Filter接口，完成我们自定义的过滤器功能。过滤器有以下功能：</p>
<ol>
<li>HttpServletRequest到达Servlet之前，拦截客户的HttpServletRequest</li>
<li>根据需要检查HttpServletRequest，也可以修改HttpServletRequest的头和数据</li>
<li>在HttpservletResponse到达客户端之前，拦截HttpServletResponse</li>
<li>根据需要检查HttpServletResponse，也可以修改HttpServletReponse的头和数据</li>
</ol>
<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>监听器可以监听客户端的请求，服务端的操作，通过监听自动激发一些操作。监听器主要有以下几种：</p>
<ol>
<li>ServletContextListener:对应所有用户</li>
<li>ServletSessionListener:对应于一个用户</li>
<li>ServletRequestListener:对应用一个请求<br>我们可以实现上面的接口，去完成监听事件。</li>
</ol>
<h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><ol>
<li>通过调用init()方法初始化Servlet实例</li>
<li>调用service()方法处理请求</li>
<li>调用相应的请求方式的方法比如post请求，调用doPost()方法</li>
<li>停止服务的时候，调用destroy()方法</li>
</ol>
<h3 id="HttpServlet类图关系"><a href="#HttpServlet类图关系" class="headerlink" title="HttpServlet类图关系"></a>HttpServlet类图关系</h3><p><img src="https://image.dullnull.org/servlet-class-diagram.png" alt="image"></p>
<h3 id="Servlet工作流程"><a href="#Servlet工作流程" class="headerlink" title="Servlet工作流程"></a>Servlet工作流程</h3><p><img src="https://image.dullnull.org/http-request-sequence-diagram.png" alt="image"></p>
<ol>
<li>浏览器发出Http请求到Servlet容器</li>
<li>Servlet容器生成HttpServletRequest和HttpServletResponse</li>
<li>Servlet将HttpServletRequest和HttpServletResponse参数传递给Filter,Filter处理过滤请求</li>
<li>Filter将HttpServletRequest和HttpServletResponse传递给Servlet,Servlet处理请求</li>
<li>Servlet处理完请求后,将数据返回给Filter,Filter返回给Servlet容器,Servlet容器再返回给浏览器</li>
</ol>
]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK源码解析之ArrayList</title>
    <url>/2019/03/18/arraylist/</url>
    <content><![CDATA[<p>JDK版本 JDK 8</p>
<h3 id="ArrayList类图"><a href="#ArrayList类图" class="headerlink" title="ArrayList类图"></a>ArrayList类图</h3><p>ArrayList继承AbstractList，实现了List，Collection接口。</p>
<p><img src="https://image.dullnull.org/arraylist-class-diagram.png" alt></p>
<a id="more"></a>
<h3 id="ArrayList属性以及方法图"><a href="#ArrayList属性以及方法图" class="headerlink" title="ArrayList属性以及方法图"></a>ArrayList属性以及方法图</h3><p><img src="https://image.dullnull.org/arraylist.png" alt></p>
<h3 id="ArrayList属性字段介绍"><a href="#ArrayList属性字段介绍" class="headerlink" title="ArrayList属性字段介绍"></a>ArrayList属性字段介绍</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">long</span> serialVersionUID  <span class="comment">// 序列化UID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> DEFAULT_CAPACITY  <span class="comment">// 默认容量</span></span><br><span class="line"></span><br><span class="line">Object[] EMPTY_ELEMENTDATA  <span class="comment">// 空数组,空的实例对象共享该空数组</span></span><br><span class="line"></span><br><span class="line">DEFAULTCObject[] APACITY_EMPTY_ELEMENTDATA  <span class="comment">// 对于空的默认size的实例对象,共享DEFAULTCAPACITY_EMPTY_ELEMENTDATA该空数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size   <span class="comment">// 数组元素size(它包含的元素的数量)</span></span><br></pre></td></tr></table></figure>
<h3 id="ArrayList方法介绍"><a href="#ArrayList方法介绍" class="headerlink" title="ArrayList方法介绍"></a>ArrayList方法介绍</h3><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ol>
<li>public ArrayList(int initialCapacity) // 带默认容量参数的构造方法</li>
<li>public ArrayList() // 无参构造方法</li>
<li>public ArrayList(Collection&lt;? extends E&gt; c) // 参数是一个Collection的构造方法</li>
</ol>
<h4 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a>扩容方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加ArrayList实例的容量</span></span><br><span class="line"><span class="comment"> * 确保至少能装下参数值的数量的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minExpand = (elementData != EMPTY_ELEMENTDATA)</span><br><span class="line">        <span class="comment">// any size if real element table</span></span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        <span class="comment">// larger than default for empty table. It's already supposed to be</span></span><br><span class="line">        <span class="comment">// at default size.</span></span><br><span class="line">        : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加容量确保至少能装下参数值数量的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="插入方法"><a href="#插入方法" class="headerlink" title="插入方法"></a>插入方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在list末尾添加新元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在特定的位置插入新的元素</span></span><br><span class="line"><span class="comment"> * 将在右面位置的元素右移一位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="移除方法"><a href="#移除方法" class="headerlink" title="移除方法"></a>移除方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除特定位置的元素</span></span><br><span class="line"><span class="comment"> * 将在右面位置的元素左移一位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除第一个出现的特定的元素值</span></span><br><span class="line"><span class="comment"> * 不存在返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="序列化方法"><a href="#序列化方法" class="headerlink" title="序列化方法"></a>序列化方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将ArrayLisy实例的状态保存到一个流里面</span></span><br><span class="line"><span class="comment"> * 就是序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照顺序写入所有的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据一个流(参数)重新生成一个ArrayList</span></span><br><span class="line"><span class="comment"> * 就是反序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in capacity</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// be like clone(), allocate array based upon size not capacity</span></span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分析总结"><a href="#分析总结" class="headerlink" title="分析总结"></a>分析总结</h3><p>ArrayList是List接口可调整数组大小的实现。实现了所有的List操作，允许包括null在内的所有元素。ArrayList是非线程同步的。扩容是按照原来容量的1.5倍。ArrayList继承AbstractList，通过<br>modCount记录修改次数。</p>
]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch学习总结</title>
    <url>/2019/03/11/elasticsearch/</url>
    <content><![CDATA[<h3 id="ElasticSearch-基本概念"><a href="#ElasticSearch-基本概念" class="headerlink" title="ElasticSearch 基本概念"></a>ElasticSearch 基本概念</h3><h4 id="节点（node）"><a href="#节点（node）" class="headerlink" title="节点（node）"></a>节点（node）</h4><p>一个节点是你集群中的一个服务器，作为集群的一部分，它存储你的数据，参与集群的索引和搜索功能。和集群类似，一个节点也是有一个名字标识。</p>
<h4 id="索引（index）"><a href="#索引（index）" class="headerlink" title="索引（index）"></a>索引（index）</h4><p>一个索引就是一个拥有几个相似特征的文档集合。索引由一个名字来标识（必须全部小写字母）。</p>
<h4 id="类型（type）"><a href="#类型（type）" class="headerlink" title="类型（type）"></a>类型（type）</h4><p>在一个索引中你可以定义一种或多种类型。一个类型是你逻辑上的分类/分区。</p>
<h4 id="文档（document）"><a href="#文档（document）" class="headerlink" title="文档（document）"></a>文档（document）</h4><p>一个文档是可被索引的基本信息单元，文档以JSON格式来表示。</p>
<a id="more"></a>
<h4 id="分片和复制（shards-amp-replicas）"><a href="#分片和复制（shards-amp-replicas）" class="headerlink" title="分片和复制（shards &amp; replicas）"></a>分片和复制（shards &amp; replicas）</h4><p>一个索引可以存储超过单个节点硬件限制的大量数据。ElasticSearch提供了将索引划分成多份的能力<br>，这些份就叫做分片。当创建一个索引的时候，可以指定分片的数量。每个分片本身也是一个功能完善，并且独立的索引，这个索引可以被放置到集群中的任何节点上。</p>
<p>分片之所以重要，主要有以下两点：（1）允许水平分割/扩展内容容量（2）允许在分片之上进行分布式的并行的操作，进而提高性能、吞吐量。</p>
<p>在一个网络环境里失败随时可能发生，在某个分片或者节点不知道怎么就处于离线状态，或者任何原因消失了，这种情况下有一种故障转移机制是非常有用并且强烈推荐的。因此，EleasticSearch可以创建一份或者多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。</p>
<p>复制之所以重要，主要有以下两点：</p>
<ol>
<li>在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原始分片置于同一节点上是非常重要的</li>
<li>扩展了搜索量/吞吐量，因为搜索可以在所有的复制上并行。</li>
</ol>
<h3 id="ElasticSearch-常用curl"><a href="#ElasticSearch-常用curl" class="headerlink" title="ElasticSearch 常用curl"></a>ElasticSearch 常用curl</h3><h5 id="增加索引mapping新字段"><a href="#增加索引mapping新字段" class="headerlink" title="增加索引mapping新字段"></a>增加索引mapping新字段</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -XPUT http:<span class="comment">//127.0.0.1:9201/job_index_v6/_mapping/b2b -d '&#123;"properties":&#123;"new_field_name":&#123;"type":"string"&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure>
<h5 id="查看集群是否健康"><a href="#查看集群是否健康" class="headerlink" title="查看集群是否健康"></a>查看集群是否健康</h5> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl <span class="string">'localhost:9201/_cat/health?v'</span></span><br></pre></td></tr></table></figure>
<h5 id="列出所有索引"><a href="#列出所有索引" class="headerlink" title="列出所有索引"></a>列出所有索引</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl <span class="string">'localhost:9201/_cat/indices?v'</span></span><br></pre></td></tr></table></figure>
<h5 id="获取集群的节点列表"><a href="#获取集群的节点列表" class="headerlink" title="获取集群的节点列表"></a>获取集群的节点列表</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl <span class="string">'localhost:9201/_cat/nodes?v'</span></span><br></pre></td></tr></table></figure>
<h5 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -X DELETE <span class="number">127.0</span>.0.1:<span class="number">9201</span>/agent_job_index</span><br></pre></td></tr></table></figure>
<h5 id="给索引设置别名"><a href="#给索引设置别名" class="headerlink" title="给索引设置别名"></a>给索引设置别名</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -X PUT <span class="number">127.0</span>.0.1:<span class="number">9201</span>/job_index_v6/_alias/job_index</span><br></pre></td></tr></table></figure>
<h5 id="查看指定索引的mapping"><a href="#查看指定索引的mapping" class="headerlink" title="查看指定索引的mapping"></a>查看指定索引的mapping</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -XGET <span class="string">"http://127.0.0.1:9201/job_index_v6/_mapping?pretty"</span></span><br></pre></td></tr></table></figure>
<h5 id="清除指定索引-数据"><a href="#清除指定索引-数据" class="headerlink" title="清除指定索引 数据"></a>清除指定索引 数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -XPOST <span class="string">'127.0.0.1:9201/job_index_v6/job/_delete_by_query?refresh&amp;slices=5&amp;pretty'</span> -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123;"query":&#123;"match_all":&#123;&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure>
<h5 id="根据查询删除"><a href="#根据查询删除" class="headerlink" title="根据查询删除"></a>根据查询删除</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -XPOST <span class="string">'127.0.0.1:9201/job_index_v6/job/_delete_by_query?refresh&amp;slices=5&amp;pretty'</span> -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123;"query":&#123;"term":&#123;"userId":"1017"&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure>
<h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -X POST http:<span class="comment">//127.0.0.1:9200/job_index_v6/job/_search -d '&#123;"query":&#123;"term":&#123;"indexStatus":"1"&#125;&#125;&#125;' | python -m json.tool</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -X POST http:<span class="comment">//127.0.0.1:9200/job_index_v6/job/_search -d '&#123;"query":&#123;"bool":&#123;"filter":[&#123;"match":&#123;"is2CJob":&#123;"query":true&#125;&#125;&#125;,&#123;"match":&#123;"isAgentJob":&#123;"query":true&#125;&#125;&#125;,&#123;"match":&#123;"switchStatus":&#123;"query":2&#125;&#125;&#125;]&#125;&#125;&#125;' | python -m json.tool</span></span><br></pre></td></tr></table></figure>
<h5 id="搜索最大值"><a href="#搜索最大值" class="headerlink" title="搜索最大值"></a>搜索最大值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -XPUT http:<span class="comment">//127.0.0.1:9200/job_index_v6/_settings -d '&#123; "index" : &#123; "max_result_window" : 20000&#125;&#125;'</span></span><br></pre></td></tr></table></figure>
<h5 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -POST <span class="number">127.0</span>.0.1:<span class="number">9201</span>/job_index_v6/job/_update_by_query -d <span class="string">'&#123;"script":&#123;"lang":"painless","inline":"if (ctx._source.is2CJob == null) &#123;ctx._source.is2CJob= '</span><span class="keyword">true</span><span class="string">'&#125;"&#125;&#125;'</span></span><br></pre></td></tr></table></figure>
<h5 id="添加一条数据"><a href="#添加一条数据" class="headerlink" title="添加一条数据"></a>添加一条数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -XPOST <span class="string">'localhost:9201/job_index_v6/job/22c3cade5f5a4f189f6145cb0b15b737?pretty'</span> -d<span class="string">'&#123;"id":"22c3cade5f5a4f189f6145cb0b15b737","sourceId":"22c3cade5f5a4f189f6145cb0b15b737","label":0,"userId":"8a1026775d16fbb2015d17a4771a0348","name":"1231231","operatorName":null,"refuseReason":null,"description":"2","workAddress":"韩国","countryId":[513114,513100,510000],"countryNames":["韩国"],"salary":3000,"salaryHigh":4000,"listPrice":2222,"channelPrice":0,"status":2,"indexStatus":2,"is2CJob":true,"deposit":500,"modifyTime":1546593027000,"createTime":1546593027000,"refreshTime":1546593027000,"companyId":"8a1026775981103b01598110cee70004","heat":0,"praise":0,"applyment":0,"comment":0,"browseNumber":0,"postName":["建筑","电工"],"post":[111200,110000,111220],"tagName":[],"tag":[],"systemTag":[],"allTag":[2215],"businessLine":237,"score":63393027,"newOldFlag":1,"switchStatus":0,"agentQuantity":0,"company.name":"北京走出趣科技发展有限公司","company.shortName":"走出趣","company.tag":[2215],"company.location":[110000,110100,110108],"company.status":1&#125;'</span></span><br></pre></td></tr></table></figure>
<h4 id="查看-索引-设置"><a href="#查看-索引-设置" class="headerlink" title="查看 索引 设置"></a>查看 索引 设置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -XGET <span class="string">"http://zcq-product2:9200/job_index_v6/_settings?pretty"</span></span><br></pre></td></tr></table></figure>
<h4 id="查看ElasticSearch状态"><a href="#查看ElasticSearch状态" class="headerlink" title="查看ElasticSearch状态"></a>查看ElasticSearch状态</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl <span class="string">'localhost:9201'</span> | python -m json.tool</span><br></pre></td></tr></table></figure>
<h5 id="按照排序搜索"><a href="#按照排序搜索" class="headerlink" title="按照排序搜索"></a>按照排序搜索</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -POST http:<span class="comment">//test2.51zouchuqu.com:9201/job_rcmd_score_index/score/_search -d '&#123;"from":0,"size":1000,"query":&#123;"bool":&#123;"disable_coord":false,"adjust_pure_negative":true,"boost":1&#125;&#125;,"explain":false,"sort":[&#123;"score":&#123;"order":"desc"&#125;&#125;]&#125;'</span></span><br></pre></td></tr></table></figure>
<h3 id="ElasticSearch-备份、导入、导出"><a href="#ElasticSearch-备份、导入、导出" class="headerlink" title="ElasticSearch 备份、导入、导出"></a>ElasticSearch 备份、导入、导出</h3><h4 id="es-数据导入导出"><a href="#es-数据导入导出" class="headerlink" title="es 数据导入导出"></a>es 数据导入导出</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install elasticdump</span><br><span class="line">./bin/elasticdump</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">index-&gt;index:</span><br><span class="line">elasticdump --input=http:<span class="comment">//localhost:9200/test --output=http://localhost:9200/test</span></span><br><span class="line">index-&gt;file:</span><br><span class="line">elasticdump --input=http:<span class="comment">//localhost:9200/test --output=./json.log</span></span><br><span class="line">file-&gt;index:</span><br><span class="line">elasticdump --input=./json.log --output=http:<span class="comment">//localhost:9200/test</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令速查笔记</title>
    <url>/2019/03/04/git/</url>
    <content><![CDATA[<h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>git clone url  将远程git仓库克隆到本地</p>
<h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>git init 在当前目录新建一个git仓库</p>
<h3 id="gitk"><a href="#gitk" class="headerlink" title="gitk"></a>gitk</h3><p>打开git仓库图形界面</p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>显示所有变更信息</p>
<h3 id="git-clean-fd"><a href="#git-clean-fd" class="headerlink" title="git clean -fd"></a>git clean -fd</h3><p>删除所有Untracked files</p>
<h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><p>将未add到Stage区的文件，暂时存储起来</p>
<a id="more"></a>
<h3 id="git-stash-apply"><a href="#git-stash-apply" class="headerlink" title="git stash apply"></a>git stash apply</h3><p>将git stash 暂时存储起来的文件，恢复，然后就可以继续add到Stash区</p>
<h3 id="git-fetch-remote"><a href="#git-fetch-remote" class="headerlink" title="git fetch remote"></a>git fetch remote</h3><p>下载远程仓库的所有更新</p>
<h3 id="git-pull-romote-branch-name"><a href="#git-pull-romote-branch-name" class="headerlink" title="git pull romote branch-name"></a>git pull romote branch-name</h3><p>下载远程仓库的所有更新，并且Merge</p>
<h3 id="git-config-配置"><a href="#git-config-配置" class="headerlink" title="git config 配置"></a>git config 配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git config --global gui.encoding=utf-<span class="number">8</span>  配置git图形界面编码为utf-<span class="number">8</span></span><br><span class="line">git config --global user.name name  设置提交代码时的用户名</span><br><span class="line">git config --global user.email email  设置提交代码时的邮箱</span><br></pre></td></tr></table></figure>
<h3 id="git-remote-远程仓库操作"><a href="#git-remote-远程仓库操作" class="headerlink" title="git remote 远程仓库操作"></a>git remote 远程仓库操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git remote -v  显示所有远程仓库</span><br><span class="line">git remote add name url  增加一个新的远程仓库</span><br></pre></td></tr></table></figure>
<h3 id="git-add-添加文件到Stage区"><a href="#git-add-添加文件到Stage区" class="headerlink" title="git add 添加文件到Stage区"></a>git add 添加文件到Stage区</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git add --all   添加所有的修改到Stage区</span><br><span class="line">git add file   添加指定文件到Stage区</span><br><span class="line">git add file1 file2   添加多个修改的文件到Stage区</span><br><span class="line">git add dir   添加修改的目录到Stage区</span><br><span class="line">git add   添加当前目录的所有修改到Stage区</span><br><span class="line">git add src/main*   添加所有src目录下main开头的所有文件到Stage区</span><br></pre></td></tr></table></figure>
<h3 id="git-commit-提交Stage区的代码到本地仓库"><a href="#git-commit-提交Stage区的代码到本地仓库" class="headerlink" title="git commit 提交Stage区的代码到本地仓库"></a>git commit 提交Stage区的代码到本地仓库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"message"</span>   提交Stage区的代码到本地仓库区</span><br><span class="line">git commit file1 file2 -m <span class="string">"message"</span>  提交Stage中在指定文件到本地仓库区</span><br><span class="line">git commit --amend -m <span class="string">"message"</span>  使用新的一次commit，来代替上一次commit，新的message也会替换上一次message</span><br></pre></td></tr></table></figure>
<h3 id="git-branch-分支"><a href="#git-branch-分支" class="headerlink" title="git branch 分支"></a>git branch 分支</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git branch   列出本地所有分支</span><br><span class="line">git branch -r  列出远程所有分支</span><br><span class="line">git branch branch-name  新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch -d branch-name   删除分支</span><br><span class="line">git branch --set-upstream-to origin/feature/company feature/company   设置分支上游</span><br></pre></td></tr></table></figure>
<h3 id="git-checkout-切换-撤销"><a href="#git-checkout-切换-撤销" class="headerlink" title="git checkout   切换/撤销"></a>git checkout   切换/撤销</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git checkout -b 本地分支名x origin/远程分支名x   创建本地分之并关联远程分支</span><br><span class="line">git checkout -b branch-name   新建一个分支，且切换到新分支</span><br><span class="line">git checkout branch-name   切换到另一个分支</span><br><span class="line">git checkout commit-file  撤销工作区文件的修改，跟上次Commit一样</span><br></pre></td></tr></table></figure>
<h3 id="git-push-向远程服务器推代码"><a href="#git-push-向远程服务器推代码" class="headerlink" title="git push  向远程服务器推代码"></a>git push  向远程服务器推代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git push origin :master   删除远程分支</span><br><span class="line">git push origin --delete tag &lt;tagname&gt;   删除远程分支</span><br><span class="line">git push reomte branch-name   上传本地仓库到远程分支</span><br><span class="line">git push reomte branch-name --force  强行推送当前分支到远程分支</span><br><span class="line">git push remote --all  推送所有分支到远程仓库</span><br><span class="line">git push --tags   推送所有标签</span><br><span class="line">git push origin tag-name  推送指定标签</span><br><span class="line">git push origin :refs/tags/tag-name   删除远程标签（需要先删除本地标签）</span><br></pre></td></tr></table></figure>
<h3 id="git-reset-重置-回退"><a href="#git-reset-重置-回退" class="headerlink" title="git reset  重置/回退"></a>git reset  重置/回退</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git reset HEAD *  将上次add 到Stage区的文件 删除</span><br><span class="line">git reset --hard  重置Stage区和工作区的所有文件和上次Commit的一样</span><br><span class="line">git reset --hard origin/master   重置Commit代码和远程分支代码一样</span><br><span class="line">git reset --hard HEAD^         回退到上个版本</span><br><span class="line">git reset --hard HEAD~<span class="number">3</span>        回退到前<span class="number">3</span>次提交之前，以此类推，回退到n次提交之前</span><br><span class="line">git reset --hard commit-id     退到/进到 指定commit的sha码</span><br></pre></td></tr></table></figure>
<h3 id="git-tag-标签"><a href="#git-tag-标签" class="headerlink" title="git tag 标签"></a>git tag 标签</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git tag -a v1.4 -m <span class="string">'my version 1.4'</span>  创建带有说明的标签</span><br><span class="line">git tag tag-name  打标签</span><br><span class="line">git tag 查看所有标签</span><br><span class="line">git tag tag-name commit-id   给指定commit打标签</span><br><span class="line">git tag -d tag-name   删除标签</span><br></pre></td></tr></table></figure>
<h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git diff file-name  查看文件在工作区和暂存区区别，也可查看工作区修改前后的区别</span><br><span class="line">git diff branch-name file-name  查看文件和另一个分支的区别</span><br><span class="line">git diff --cached  file-name  查看暂存区和本地仓库区别</span><br><span class="line">fid diff commit-id commit-id  本地仓库两次提交区别</span><br></pre></td></tr></table></figure>
<p>感觉还是idea好用啊。</p>
<h3 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git show tag-name  查看指定标签的提交信息</span><br><span class="line">git show commit-id  查看具体的某次改动</span><br></pre></td></tr></table></figure>
<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git log --pretty=oneline 文件名     查看该文件的改动历史</span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit   格式化查看历史提交</span><br><span class="line">git log --pretty=<span class="string">'%aN'</span> | sort | uniq -c | sort -k1 -n -r | head -n <span class="number">5</span>  统计仓库提交排名前<span class="number">5</span></span><br><span class="line">git log --author=<span class="string">"goodgoodstate"</span> --pretty=tformat: --numstat | gawk <span class="string">'&#123; add += $1 ; subs += $2 &#125; END &#123; printf "added lines: %s removed lines : %s \n",add,subs &#125;'</span></span><br><span class="line">查看指定用户添加代码行数，和删除代码行数</span><br></pre></td></tr></table></figure>
<h3 id="git-merge-合并代码，自动创建合并commit"><a href="#git-merge-合并代码，自动创建合并commit" class="headerlink" title="git merge 合并代码，自动创建合并commit"></a>git merge 合并代码，自动创建合并commit</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git merge branch-name  将指定分支合并到当前分支</span><br></pre></td></tr></table></figure>
<h3 id="git-rebase-合并代码，不会创建合并commit"><a href="#git-rebase-合并代码，不会创建合并commit" class="headerlink" title="git rebase  合并代码，不会创建合并commit"></a>git rebase  合并代码，不会创建合并commit</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git merge branch-name  将指定分支合并到当前分支</span><br></pre></td></tr></table></figure>
<p>rebase 操作比较危险，因为它重写了commit历史，但是rebase可以得到干净的commit历史（个人很推荐）。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令速查笔记</title>
    <url>/2019/02/25/linux/</url>
    <content><![CDATA[<h3 id="cd-进入指定目录"><a href="#cd-进入指定目录" class="headerlink" title="cd  进入指定目录"></a>cd  进入指定目录</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cd dir          <span class="comment">// 进入当前目录的子目录</span></span><br><span class="line">cd ..           <span class="comment">// 进入当前目录的上一级目录</span></span><br><span class="line">cd /            <span class="comment">// 进入系统根目录</span></span><br><span class="line">cd ~            <span class="comment">// 进入当前用户主目录</span></span><br><span class="line">cd /usr/local   <span class="comment">// 进入特定目录</span></span><br></pre></td></tr></table></figure>
<h3 id="ls-列出当前目录文件"><a href="#ls-列出当前目录文件" class="headerlink" title="ls 列出当前目录文件"></a>ls 列出当前目录文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ls -a   <span class="comment">// 列出当前目录所有文件，包含隐藏文件</span></span><br><span class="line">ls -l   <span class="comment">// 列出长数据串，包含文件的权限和属性 相当于 ll</span></span><br><span class="line">ls -i   <span class="comment">// 显示文件节点索引号</span></span><br><span class="line">ls -t   <span class="comment">// 按照修改时间，降序显示</span></span><br><span class="line">ls -rt  <span class="comment">// 按照修改时间，升序显示</span></span><br><span class="line">ls -alht  <span class="comment">// 按照修改时间，降序显示 h显示文件大小</span></span><br></pre></td></tr></table></figure>
<font color="red" size="3" face="“Consolas”">个人感觉 ll -h 比较好用</font>

<h3 id="mv-修改文件名字或移动位置"><a href="#mv-修改文件名字或移动位置" class="headerlink" title="mv  修改文件名字或移动位置"></a>mv  修改文件名字或移动位置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mv file newname         <span class="comment">// 更改文件名字</span></span><br><span class="line">mv /dir/file /otherdir  <span class="comment">// 移动文件位置</span></span><br></pre></td></tr></table></figure>
<h3 id="rm-删除"><a href="#rm-删除" class="headerlink" title="rm 删除"></a>rm 删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rm -rf dir  <span class="comment">// 递归删除指定目录中的所有文件</span></span><br><span class="line">rm file     <span class="comment">// 删除指定文件</span></span><br><span class="line">rm -rf *    <span class="comment">// 递归删除当前目录中的所有文件</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a>cp 复制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cp -r /dir /other-dir    <span class="comment">// 将dir目录下所有文件，移动到other-dir目录中</span></span><br><span class="line">cp fileA fileB           <span class="comment">// 备份A文件，并改名</span></span><br></pre></td></tr></table></figure>
<h3 id="kill-杀进程"><a href="#kill-杀进程" class="headerlink" title="kill 杀进程"></a>kill 杀进程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kill -<span class="number">9</span>  PID   <span class="comment">// 将PID进程结束</span></span><br><span class="line">kill -<span class="number">17</span> PID   <span class="comment">// 将PID进程暂停</span></span><br></pre></td></tr></table></figure>
<h3 id="chown-修改文件所属用户或用户组"><a href="#chown-修改文件所属用户或用户组" class="headerlink" title="chown 修改文件所属用户或用户组"></a>chown 修改文件所属用户或用户组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">chown -R root:root /tmp    <span class="comment">// 修改 tmp 目录所属用户为 root，用户组为 root</span></span><br><span class="line">chown iisheng file  <span class="comment">// 将file的所有者设置为iisheng</span></span><br></pre></td></tr></table></figure>
<h3 id="chmod-给文件设置别人访问权限"><a href="#chmod-给文件设置别人访问权限" class="headerlink" title="chmod 给文件设置别人访问权限"></a>chmod 给文件设置别人访问权限</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">chmod <span class="number">766</span> file <span class="comment">// 给某个文件别人访问权限</span></span><br><span class="line">chmod <span class="number">777</span> * <span class="comment">// 当前文件夹所有文件所有用户都可以读写</span></span><br></pre></td></tr></table></figure>
<h3 id="cat-查看文件或写到指定文件内容"><a href="#cat-查看文件或写到指定文件内容" class="headerlink" title="cat  查看文件或写到指定文件内容"></a>cat  查看文件或写到指定文件内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cat file                                  <span class="comment">// 显示整个文件内容</span></span><br><span class="line">cat -n file                               <span class="comment">// 显示整个文件内容，并由1开始对行数编号</span></span><br><span class="line">cat file &gt; newFile                        <span class="comment">// 将文件的内容写到新文件里面</span></span><br><span class="line">cat file | head -n <span class="number">3000</span> | tail -n +<span class="number">1000</span>   <span class="comment">// 查看文件的1000-3000行</span></span><br><span class="line">cat /proc/PID/status                      <span class="comment">// 查看指定进程的相关信息</span></span><br></pre></td></tr></table></figure>
<h3 id="scp-终端远程下载上传文件"><a href="#scp-终端远程下载上传文件" class="headerlink" title="scp 终端远程下载上传文件"></a>scp 终端远程下载上传文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">scp  root<span class="meta">@dullnull</span>.org:/path/filename ./                              <span class="comment">// 文件下载到本地当前目录</span></span><br><span class="line">scp  -P  <span class="number">2222</span>  /home/jdk.tar.gz   root<span class="meta">@dullnull</span>.org:/root/jdk.tar.gz  <span class="comment">// 上传文件</span></span><br><span class="line">scp  -P  <span class="number">2222</span>  -r /home/jdk/ root<span class="meta">@isheng</span>.me                        <span class="comment">// 上传文件目录</span></span><br><span class="line">scp  -P  <span class="number">2222</span>  -r /home/jdk/ root<span class="meta">@isheng</span>.me                        <span class="comment">// 使用IPV6寻址上传文件目录</span></span><br></pre></td></tr></table></figure>
<h3 id="netstat-打印网络信息状态"><a href="#netstat-打印网络信息状态" class="headerlink" title="netstat  打印网络信息状态"></a>netstat  打印网络信息状态</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">netstat -at                <span class="comment">// 列出所有TCP端口</span></span><br><span class="line">netstat -au                <span class="comment">// 列出所有UDP端口</span></span><br><span class="line">netstat -lt                <span class="comment">// 列出所有监听TCP的端口</span></span><br><span class="line">netstat -lu                <span class="comment">// 列出所有监听UDP的端口</span></span><br><span class="line">netstat -r                 <span class="comment">// 显示核心路由信息</span></span><br><span class="line">netstat -anl | grep <span class="number">8888</span>   <span class="comment">// 查看相关端口号信息</span></span><br></pre></td></tr></table></figure>
<h3 id="top-实时系统的查看系统运行情况"><a href="#top-实时系统的查看系统运行情况" class="headerlink" title="top  实时系统的查看系统运行情况"></a>top  实时系统的查看系统运行情况</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">top              <span class="comment">// 动态查看系统的整体运行情况</span></span><br><span class="line">top -p PID       <span class="comment">// 查看指定进程的运行情况</span></span><br><span class="line">top -u user      <span class="comment">// 查看指定用户的相关进程的运行情况</span></span><br></pre></td></tr></table></figure>
<font color="red" size="3" face="“Consolas”">htop 和top类似功能</font>

<h3 id="sed-处理文件并在控制台打印"><a href="#sed-处理文件并在控制台打印" class="headerlink" title="sed  处理文件并在控制台打印"></a>sed  处理文件并在控制台打印</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sed <span class="string">'s/book/books/'</span> file   <span class="comment">// s 替换指定 字符，将book替换为books</span></span><br><span class="line">sed -i <span class="string">'s/book/books/g'</span> file  <span class="comment">// g 替换文本中内容 -i 直接编辑文本选项 匹配文件中第一个book替换为books</span></span><br></pre></td></tr></table></figure>
<font color="red" size="3" face="“Consolas”">这个东西很多功能的，暂时不详细学习</font>

<h3 id="less-从头查看日志"><a href="#less-从头查看日志" class="headerlink" title="less 从头查看日志"></a>less 从头查看日志</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">shift+g 跳转到文件底部</span><br><span class="line">按f键,是向前(下)查看  forword</span><br><span class="line">按b键,是向后(上)查看  backword</span><br><span class="line">q  退出</span><br></pre></td></tr></table></figure>
<h3 id="more-从头查看日志"><a href="#more-从头查看日志" class="headerlink" title="more 从头查看日志"></a>more 从头查看日志</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">more file</span><br><span class="line">按ctrl+f键,是向前(下)查看  forword</span><br><span class="line">按ctrl+b键,是向后(上)查看 backword</span><br></pre></td></tr></table></figure>
<h3 id="tail-动态查看文件尾部内容"><a href="#tail-动态查看文件尾部内容" class="headerlink" title="tail 动态查看文件尾部内容"></a>tail 动态查看文件尾部内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tail -<span class="number">500f</span> file  <span class="comment">// 动态查看文件尾部500行</span></span><br></pre></td></tr></table></figure>
<h3 id="head-显示文件开头内容"><a href="#head-显示文件开头内容" class="headerlink" title="head 显示文件开头内容"></a>head 显示文件开头内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">head -<span class="number">100f</span> file  <span class="comment">// 查看文件前100行</span></span><br></pre></td></tr></table></figure>
<h3 id="rar-解压rar文件或压缩为rar文件"><a href="#rar-解压rar文件或压缩为rar文件" class="headerlink" title="rar 解压rar文件或压缩为rar文件"></a>rar 解压rar文件或压缩为rar文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rar x -ep2 filename    <span class="comment">// 将Windows rar文件 解压 utf-8编码的文件</span></span><br></pre></td></tr></table></figure>
<h3 id="unzip-解压zip文件或压缩为zip文件"><a href="#unzip-解压zip文件或压缩为zip文件" class="headerlink" title="unzip 解压zip文件或压缩为zip文件"></a>unzip 解压zip文件或压缩为zip文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">unzip -d fileDir file.zip   <span class="comment">// zip 文件 解压</span></span><br><span class="line">unzip fileName <span class="comment">// 文件解压缩到当前目录</span></span><br><span class="line">unzip -O cp936 file.zip <span class="comment">//将Windows文件以utf-8编码解压缩</span></span><br></pre></td></tr></table></figure>
<h3 id="service-启动查看进程状态"><a href="#service-启动查看进程状态" class="headerlink" title="service 启动查看进程状态"></a>service 启动查看进程状态</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">service sshd status        <span class="comment">// 查看sshd的运行状态</span></span><br><span class="line">service sshd start        <span class="comment">// 启动服务</span></span><br></pre></td></tr></table></figure>
<h3 id="systemctl-启动查看进程状态"><a href="#systemctl-启动查看进程状态" class="headerlink" title="systemctl 启动查看进程状态"></a>systemctl 启动查看进程状态</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">systemctl status httpd.service <span class="comment">// 查看httpd服务状态</span></span><br><span class="line">systemctl enable httpd.service <span class="comment">// 启动服务</span></span><br></pre></td></tr></table></figure>
<h3 id="安装、卸载软件"><a href="#安装、卸载软件" class="headerlink" title="安装、卸载软件"></a>安装、卸载软件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo agt-get install git  <span class="comment">// 安装git</span></span><br><span class="line">sudo apt-get --purge remove git  <span class="comment">// 卸载git</span></span><br></pre></td></tr></table></figure>
<h3 id="dpkg"><a href="#dpkg" class="headerlink" title="dpkg"></a>dpkg</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i *.deb    <span class="comment">// 安装.deb文件的软件</span></span><br><span class="line">sudo dpkg -P *.deb    <span class="comment">// 卸载.deb文件的软件</span></span><br></pre></td></tr></table></figure>
<h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">shutdown -h now    <span class="comment">// 关机</span></span><br><span class="line">shutdown -r now    <span class="comment">// 重启</span></span><br></pre></td></tr></table></figure>
<h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">df -lh   <span class="comment">// 查看系统硬盘使用情况</span></span><br></pre></td></tr></table></figure>
<h3 id="du"><a href="#du" class="headerlink" title="du"></a>du</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">du -sh     <span class="comment">// 查看文件目录大小</span></span><br><span class="line">du -ah     <span class="comment">// 查看文件目录下面各个文件大小</span></span><br><span class="line">du -h --max-depth=<span class="number">1</span> ./  <span class="comment">// 查看当前目录大小</span></span><br></pre></td></tr></table></figure>
<h3 id="find-查找"><a href="#find-查找" class="headerlink" title="find 查找"></a>find 查找</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">"*.c"</span> | xargs grep -H <span class="string">"intern("</span>  <span class="comment">// 查找当前目录指定文件后缀包含指定字符的结果</span></span><br><span class="line">find /home -name <span class="string">'*.md'</span> <span class="comment">// 查找指定目录包含指定字符串 的文件名路径</span></span><br></pre></td></tr></table></figure>
<h3 id="grep-全面搜索正则表达式并把行打印出来"><a href="#grep-全面搜索正则表达式并把行打印出来" class="headerlink" title="grep 全面搜索正则表达式并把行打印出来"></a>grep 全面搜索正则表达式并把行打印出来</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">grep -rn <span class="string">"hello,world!"</span> *  <span class="comment">// 在当前目录查找 hello,world 字符串</span></span><br><span class="line">grep <span class="string">'model name'</span> /proc/cpuinfo | wc -l  <span class="comment">// 查看系统有几个CPU</span></span><br></pre></td></tr></table></figure>
<font color="red" size="3" face="“Consolas”">一般配合别的命令一起使用效果很强大</font>

<h3 id="ps-显示当前进程状态"><a href="#ps-显示当前进程状态" class="headerlink" title="ps  显示当前进程状态"></a>ps  显示当前进程状态</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ps aux | grep nginx     <span class="comment">// 根据名字查找进程</span></span><br><span class="line">ps -ef | grep elastic   <span class="comment">// 根据名字查找进程</span></span><br></pre></td></tr></table></figure>
<h3 id="lsof-查看进程打开的端口，查看打开文件的进程"><a href="#lsof-查看进程打开的端口，查看打开文件的进程" class="headerlink" title="lsof  查看进程打开的端口，查看打开文件的进程"></a>lsof  查看进程打开的端口，查看打开文件的进程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lsof -i:<span class="number">8888</span>      <span class="comment">// 根据端口号查看相关进程信息</span></span><br></pre></td></tr></table></figure>
<h3 id="iconv-转换文件编码"><a href="#iconv-转换文件编码" class="headerlink" title="iconv  转换文件编码"></a>iconv  转换文件编码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">iconv -f gb2312 file -o newFile  <span class="comment">// 将Windows文件转换为Linux识别的文件</span></span><br><span class="line">iconv -f gbk -t utf8 file &gt; bewFile  <span class="comment">// 将Windows文件转换为Linux识别的文件</span></span><br></pre></td></tr></table></figure>
<h3 id="curl-文本传输工具"><a href="#curl-文本传输工具" class="headerlink" title="curl 文本传输工具"></a>curl 文本传输工具</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">'Content-Type:application/json'</span> https:<span class="comment">//api.github.com -s | python -m json.tool  // GET请求</span></span><br><span class="line">curl -X PUT <span class="number">127.0</span>.0.1:<span class="number">9200</span>/job_index/_mapping/job -d <span class="string">'&#123;"properties":&#123;"new_field":&#123;"type":"integer"&#125;&#125;&#125;'</span>  <span class="comment">// PUT请求</span></span><br><span class="line">curl -X DELETE <span class="number">127.0</span>.0.1:<span class="number">9200</span>/agent_job_index  <span class="comment">// DELETE请求</span></span><br><span class="line">curl -X POST <span class="number">127.0</span>.0.1:<span class="number">9200</span>/job_index/job/_search -d <span class="string">'&#123;"query":&#123;"term":&#123;"id":"1"&#125;&#125;&#125;'</span> <span class="comment">// POST请求</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
